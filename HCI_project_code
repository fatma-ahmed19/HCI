{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4696156c",
   "metadata": {
    "papermill": {
     "duration": 0.034326,
     "end_time": "2024-06-19T16:28:58.499453",
     "exception": false,
     "start_time": "2024-06-19T16:28:58.465127",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Information Given in Documentation\n",
    "[https://www.bbci.de/competition/iv/desc_2a.pdf](http://)\n",
    "\n",
    "*   25 electrodes are used, first 22 are EEG, last 3 are EOG\n",
    "*   Sampling frequency (fs) is 250Hz\n",
    "*   9 subjects\n",
    "\n",
    "**-Time Duration:-**\n",
    "*  1 trials = 7-8s\n",
    "*  1 run = 48 trials = 336-384s\n",
    "*  1 session = 6 runs = 288 trials = 2016-2304s   9 run (run 1-3 are for eye movement, run 4-9 is MI)\n",
    "\n",
    "**About the recording of eye movement**\n",
    "\n",
    "*     run 1 => 2 mins with eyes open\n",
    "*     run 2 => 1 min with eyes closed\n",
    "*     run 3 => 1 min with eye movements\n"
   ]
  },
  {
   "attachments": {
    "d7c2a64e-ae01-48cf-99bd-9f9724f0bcbb.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "711a6b9b",
   "metadata": {
    "papermill": {
     "duration": 0.031873,
     "end_time": "2024-06-19T16:28:58.564851",
     "exception": false,
     "start_time": "2024-06-19T16:28:58.532978",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "![mi_paradigm.png](attachment:d7c2a64e-ae01-48cf-99bd-9f9724f0bcbb.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dda02af9",
   "metadata": {
    "papermill": {
     "duration": 0.034175,
     "end_time": "2024-06-19T16:28:58.631210",
     "exception": false,
     "start_time": "2024-06-19T16:28:58.597035",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Explanation regarding contents of the keys inside each subject data:**\n",
    "*     **s:** 's' contains continuous time-series recorded EEG signals are, shape of M x N array. Size may vary between subjects but N is fixed to 25, indicates 25 electrodes with 22 first EEG and 3 last EOG\n",
    "*     **etype:** 'etyp' stands for event type which indicate event occurence, event code will be describe in subsequent table\n",
    "*     **epos:** 'epos' stands for event position, denoting corresponding event begins at n-th sample at 's'\n",
    "*    **edur:** 'edur' stands for event duration, denoting duration of corresponding event\n",
    "*    **artifacts:** size of 288 x 1, 288 comes form 6 x 48, 6 runs where @run has 48 trials, @class has 12 trials\n"
   ]
  },
  {
   "attachments": {
    "a6bcdba2-1754-444d-9bbe-0339548ed5b3.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "ccda6a2b",
   "metadata": {
    "papermill": {
     "duration": 0.032752,
     "end_time": "2024-06-19T16:28:58.696213",
     "exception": false,
     "start_time": "2024-06-19T16:28:58.663461",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "![event_table.png](attachment:a6bcdba2-1754-444d-9bbe-0339548ed5b3.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "afd61447",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:28:58.760852Z",
     "iopub.status.busy": "2024-06-19T16:28:58.760456Z",
     "iopub.status.idle": "2024-06-19T16:29:00.782747Z",
     "shell.execute_reply": "2024-06-19T16:29:00.781838Z"
    },
    "papermill": {
     "duration": 2.057247,
     "end_time": "2024-06-19T16:29:00.785192",
     "exception": false,
     "start_time": "2024-06-19T16:28:58.727945",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "from scipy.linalg import sqrtm\n",
    "from scipy.linalg import inv\n",
    "from sklearn.feature_selection import mutual_info_classif\n",
    "from sklearn.feature_selection import SelectKBest\n",
    "# Band pass filter with butterworth filter\n",
    "from scipy.signal import butter, lfilter\n",
    "from scipy.signal import freqz\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.model_selection import cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "268c18d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:00.853404Z",
     "iopub.status.busy": "2024-06-19T16:29:00.852466Z",
     "iopub.status.idle": "2024-06-19T16:29:00.857830Z",
     "shell.execute_reply": "2024-06-19T16:29:00.856793Z"
    },
    "papermill": {
     "duration": 0.041142,
     "end_time": "2024-06-19T16:29:00.859925",
     "exception": false,
     "start_time": "2024-06-19T16:29:00.818783",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Number of subject, n + 1 for iteration purpose (there are 9 subjects)\n",
    "Number_subject = 10\n",
    "\n",
    "# Creating dict to store original data and modified data\n",
    "# original_data will serve as initial loaded data that will remain unchanged\n",
    "# modified_data will contain modified original data\n",
    "original_data = dict()\n",
    "modified_data = dict() \n",
    "original_dataE = dict() \n",
    "modified_dataE = dict() \n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0f7c5234",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:00.925271Z",
     "iopub.status.busy": "2024-06-19T16:29:00.924940Z",
     "iopub.status.idle": "2024-06-19T16:29:00.929458Z",
     "shell.execute_reply": "2024-06-19T16:29:00.928497Z"
    },
    "papermill": {
     "duration": 0.039961,
     "end_time": "2024-06-19T16:29:00.931621",
     "exception": false,
     "start_time": "2024-06-19T16:29:00.891660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Function to count subject\n",
    "def subject_counter(i):\n",
    "    return 'subject0{}'.format(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "afbe6748",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:00.999175Z",
     "iopub.status.busy": "2024-06-19T16:29:00.998351Z",
     "iopub.status.idle": "2024-06-19T16:29:01.381350Z",
     "shell.execute_reply": "2024-06-19T16:29:01.380442Z"
    },
    "papermill": {
     "duration": 0.420435,
     "end_time": "2024-06-19T16:29:01.383806",
     "exception": false,
     "start_time": "2024-06-19T16:29:00.963371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "base_dir =\"/kaggle/input/dataset-2\"\n",
    "base_dirE =\"/kaggle/input/dataset-2\"\n",
    "# Load the training data of all subjects\n",
    "\n",
    "# Iter over all data path then store them in sub0X variable\n",
    "for i in range(1, Number_subject):\n",
    "    data_path = os.path.join(base_dir, 'A{:02d}T.npz'.format(i))\n",
    "    data_pathE = os.path.join(base_dirE, 'A{:02d}E.npz'.format(i))\n",
    "    subject = 'subject{:02d}'.format(i)\n",
    "    \n",
    "    # Load EEG data from datapath and store into subj0X variabel then store into data dictionary\n",
    "    original_data[subject] = np.load(data_path)\n",
    "    original_dataE[subject] = np.load(data_pathE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a02ff1e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:01.448630Z",
     "iopub.status.busy": "2024-06-19T16:29:01.448289Z",
     "iopub.status.idle": "2024-06-19T16:29:01.454190Z",
     "shell.execute_reply": "2024-06-19T16:29:01.453333Z"
    },
    "papermill": {
     "duration": 0.041111,
     "end_time": "2024-06-19T16:29:01.456699",
     "exception": false,
     "start_time": "2024-06-19T16:29:01.415588",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.lib.npyio.NpzFile'>\n",
      "['s', 'etyp', 'epos', 'edur', 'artifacts']\n",
      "#########################################################################################\n",
      "<class 'numpy.lib.npyio.NpzFile'>\n",
      "['s', 'etyp', 'epos', 'edur', 'artifacts']\n"
     ]
    }
   ],
   "source": [
    "# Peek into ori_data type and its keys \n",
    "print(type(original_data['subject01']))#This line prints the type of the object associated with the key \n",
    "print(original_data['subject01'].files)# list of files contained within the NpzFile object.it converts a multi-dimensional array into a one-dimensional array\n",
    "print('#########################################################################################')\n",
    "print(type(original_dataE['subject01']))#This line prints the type of the object associated with the key \n",
    "print(original_dataE['subject01'].files)# list of files contained within the NpzFile object.it converts a multi-dimensional array into a one-dimensional array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b790c1eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:01.568146Z",
     "iopub.status.busy": "2024-06-19T16:29:01.567793Z",
     "iopub.status.idle": "2024-06-19T16:29:01.577645Z",
     "shell.execute_reply": "2024-06-19T16:29:01.576686Z"
    },
    "papermill": {
     "duration": 0.091085,
     "end_time": "2024-06-19T16:29:01.579853",
     "exception": false,
     "start_time": "2024-06-19T16:29:01.488768",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([771, 768, 772, 768, 770, 768, 771, 768, 769, 768, 769, 768, 769,\n",
       "       768, 772, 768, 770, 768, 770, 768, 769, 768, 769, 768, 771, 768,\n",
       "       769, 768, 770, 768], dtype=uint16)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "original_data['subject01']['etyp'].ravel()[20:50]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "67d7323c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:01.648664Z",
     "iopub.status.busy": "2024-06-19T16:29:01.648303Z",
     "iopub.status.idle": "2024-06-19T16:29:02.532489Z",
     "shell.execute_reply": "2024-06-19T16:29:02.531244Z"
    },
    "papermill": {
     "duration": 0.921608,
     "end_time": "2024-06-19T16:29:02.534921",
     "exception": false,
     "start_time": "2024-06-19T16:29:01.613313",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-25.24414062, -16.06445312, -22.75390625, -28.3203125 ,\n",
       "       -29.24804688, -26.26953125, -27.39257812, -23.6328125 ,\n",
       "       -23.48632812, -26.70898438, -31.0546875 , -30.71289062,\n",
       "       -26.12304688, -22.99804688, -27.09960938, -26.3671875 ,\n",
       "       -23.33984375,  22.4609375 , -13.18359375, -40.52734375,\n",
       "       -15.625     , -19.7265625 , -18.84765625, -21.58203125,\n",
       "       -20.75195312, -21.72851562, -12.45117188, -20.41015625,\n",
       "       -23.73046875, -25.92773438])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "original_data['subject01']['s'].ravel()[30:60]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a6041460",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:02.605609Z",
     "iopub.status.busy": "2024-06-19T16:29:02.605216Z",
     "iopub.status.idle": "2024-06-19T16:29:02.612989Z",
     "shell.execute_reply": "2024-06-19T16:29:02.612002Z"
    },
    "papermill": {
     "duration": 0.046739,
     "end_time": "2024-06-19T16:29:02.615512",
     "exception": false,
     "start_time": "2024-06-19T16:29:02.568773",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n",
       "       1, 0, 0, 0, 1, 0, 0, 0], dtype=uint8)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "original_data['subject01']['artifacts'].ravel()[30:60]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ac514c04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:02.697473Z",
     "iopub.status.busy": "2024-06-19T16:29:02.697140Z",
     "iopub.status.idle": "2024-06-19T16:29:02.706524Z",
     "shell.execute_reply": "2024-06-19T16:29:02.705219Z"
    },
    "papermill": {
     "duration": 0.056622,
     "end_time": "2024-06-19T16:29:02.709500",
     "exception": false,
     "start_time": "2024-06-19T16:29:02.652878",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([133887, 134387, 135799, 136299, 137830, 138330, 139783, 140283,\n",
       "       141744, 142244, 143848, 144348, 145852, 146352, 147827, 148327,\n",
       "       149853, 150353, 151924, 152424, 154031, 154531, 156123, 156623,\n",
       "       158214, 158714, 160257, 160757, 162321, 162821, 164341, 164841,\n",
       "       166313, 166813, 168276, 168776, 170201, 170701, 172282, 172782,\n",
       "       174260, 174760, 176250, 176750, 178369, 178869, 180275, 180775,\n",
       "       182203, 182203], dtype=int32)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "original_data['subject01']['epos'].ravel()[50:100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5beb633b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:02.780381Z",
     "iopub.status.busy": "2024-06-19T16:29:02.779493Z",
     "iopub.status.idle": "2024-06-19T16:29:02.789280Z",
     "shell.execute_reply": "2024-06-19T16:29:02.788005Z"
    },
    "papermill": {
     "duration": 0.048115,
     "end_time": "2024-06-19T16:29:02.792016",
     "exception": false,
     "start_time": "2024-06-19T16:29:02.743901",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 313, 1875,  313, 1875,  313, 1875,  313, 1875,  313, 1875,  313,\n",
       "       1875,  313, 1875,  313, 1875,  313, 1875,  313, 1875,  313, 1875,\n",
       "        313, 1875,  313, 1875,  313, 1875,  313, 1875, 1875,  313, 1875,\n",
       "        313, 1875,  313, 1875,  313, 1875,  313, 1875,  313, 1875,  313,\n",
       "       1875,  313, 1875,  313, 1875,  313, 1875,  313, 1875,  313, 1875,\n",
       "        313, 1875,  313, 1875,  313, 1875,  313, 1875,  313, 1875,  313,\n",
       "       1875,  313, 1875,  313, 1875,  313, 1875,  313, 1875,  313, 1875,\n",
       "        313, 1875, 1875], dtype=uint16)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "original_data['subject01']['edur'].ravel()[20:100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "63dd783c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:02.881697Z",
     "iopub.status.busy": "2024-06-19T16:29:02.880574Z",
     "iopub.status.idle": "2024-06-19T16:29:02.885978Z",
     "shell.execute_reply": "2024-06-19T16:29:02.885270Z"
    },
    "papermill": {
     "duration": 0.053782,
     "end_time": "2024-06-19T16:29:02.888765",
     "exception": false,
     "start_time": "2024-06-19T16:29:02.834983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Initialize 'subject0x' dict inside modified_data\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    modified_data[subj] = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "16adad19",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:02.969787Z",
     "iopub.status.busy": "2024-06-19T16:29:02.969145Z",
     "iopub.status.idle": "2024-06-19T16:29:02.973997Z",
     "shell.execute_reply": "2024-06-19T16:29:02.973310Z"
    },
    "papermill": {
     "duration": 0.048587,
     "end_time": "2024-06-19T16:29:02.976492",
     "exception": false,
     "start_time": "2024-06-19T16:29:02.927905",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Initialize 'subject0x' dict inside modified_dataE\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    modified_dataE[subj] = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1fcde266",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:03.044734Z",
     "iopub.status.busy": "2024-06-19T16:29:03.044033Z",
     "iopub.status.idle": "2024-06-19T16:29:09.545585Z",
     "shell.execute_reply": "2024-06-19T16:29:09.544410Z"
    },
    "papermill": {
     "duration": 6.537738,
     "end_time": "2024-06-19T16:29:09.548159",
     "exception": false,
     "start_time": "2024-06-19T16:29:03.010421",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sample\tElectrodes\n",
      "(672528, 25)\n",
      "(677169, 25)\n",
      "(660530, 25)\n",
      "(600915, 25)\n",
      "(686120, 25)\n",
      "(678980, 25)\n",
      "(681071, 25)\n",
      "(675270, 25)\n",
      "(673328, 25)\n"
     ]
    }
   ],
   "source": [
    "# Peek into the shape of the recorded data for each subject\n",
    "print('Sample\\tElectrodes')\n",
    "for i in range(1, Number_subject):\n",
    "    subj_temp = subject_counter(i)\n",
    "    print(original_data[subj_temp]['s'].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7d273ee9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:09.623312Z",
     "iopub.status.busy": "2024-06-19T16:29:09.622925Z",
     "iopub.status.idle": "2024-06-19T16:29:16.125825Z",
     "shell.execute_reply": "2024-06-19T16:29:16.124846Z"
    },
    "papermill": {
     "duration": 6.543297,
     "end_time": "2024-06-19T16:29:16.128121",
     "exception": false,
     "start_time": "2024-06-19T16:29:09.584824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sample\tElectrodes\n",
      "(687000, 25)\n",
      "(662666, 25)\n",
      "(648775, 25)\n",
      "(660047, 25)\n",
      "(679863, 25)\n",
      "(666373, 25)\n",
      "(673135, 25)\n",
      "(687792, 25)\n",
      "(675098, 25)\n"
     ]
    }
   ],
   "source": [
    "# Peek into the shape of the recorded data for each subject\n",
    "print('Sample\\tElectrodes')\n",
    "for i in range(1, Number_subject):\n",
    "    subj_temp = subject_counter(i)\n",
    "    print(original_dataE[subj_temp]['s'].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5ec80b88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:16.200089Z",
     "iopub.status.busy": "2024-06-19T16:29:16.199277Z",
     "iopub.status.idle": "2024-06-19T16:29:20.683869Z",
     "shell.execute_reply": "2024-06-19T16:29:20.682727Z"
    },
    "papermill": {
     "duration": 4.523324,
     "end_time": "2024-06-19T16:29:20.686583",
     "exception": false,
     "start_time": "2024-06-19T16:29:16.163259",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# First extract the sample data from original_data into modified_data\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    modified_data[subj]['raw_EEG'] = original_data[subj]['s']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "25ce43c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:20.765388Z",
     "iopub.status.busy": "2024-06-19T16:29:20.764485Z",
     "iopub.status.idle": "2024-06-19T16:29:25.433241Z",
     "shell.execute_reply": "2024-06-19T16:29:25.432136Z"
    },
    "papermill": {
     "duration": 4.710663,
     "end_time": "2024-06-19T16:29:25.435784",
     "exception": false,
     "start_time": "2024-06-19T16:29:20.725121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# First extract the sample data from original_data into modified_data\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    modified_dataE[subj]['raw_EEG'] = original_dataE[subj]['s']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e5fabae1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:25.510281Z",
     "iopub.status.busy": "2024-06-19T16:29:25.509419Z",
     "iopub.status.idle": "2024-06-19T16:29:25.540731Z",
     "shell.execute_reply": "2024-06-19T16:29:25.539667Z"
    },
    "papermill": {
     "duration": 0.07008,
     "end_time": "2024-06-19T16:29:25.543104",
     "exception": false,
     "start_time": "2024-06-19T16:29:25.473024",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>15</th>\n",
       "      <th>16</th>\n",
       "      <th>17</th>\n",
       "      <th>18</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "      <th>22</th>\n",
       "      <th>23</th>\n",
       "      <th>24</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-21.142578</td>\n",
       "      <td>-23.681641</td>\n",
       "      <td>-21.484375</td>\n",
       "      <td>-25.146484</td>\n",
       "      <td>-25.732422</td>\n",
       "      <td>-27.929688</td>\n",
       "      <td>-14.550781</td>\n",
       "      <td>-22.509766</td>\n",
       "      <td>-25.439453</td>\n",
       "      <td>-28.710938</td>\n",
       "      <td>...</td>\n",
       "      <td>-30.615234</td>\n",
       "      <td>-29.638672</td>\n",
       "      <td>-26.660156</td>\n",
       "      <td>-20.947266</td>\n",
       "      <td>-25.439453</td>\n",
       "      <td>-24.902344</td>\n",
       "      <td>-19.677734</td>\n",
       "      <td>31.738281</td>\n",
       "      <td>-13.671875</td>\n",
       "      <td>-43.945312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-21.923828</td>\n",
       "      <td>-23.925781</td>\n",
       "      <td>-24.316406</td>\n",
       "      <td>-25.341797</td>\n",
       "      <td>-26.074219</td>\n",
       "      <td>-25.244141</td>\n",
       "      <td>-16.064453</td>\n",
       "      <td>-22.753906</td>\n",
       "      <td>-28.320312</td>\n",
       "      <td>-29.248047</td>\n",
       "      <td>...</td>\n",
       "      <td>-31.054688</td>\n",
       "      <td>-30.712891</td>\n",
       "      <td>-26.123047</td>\n",
       "      <td>-22.998047</td>\n",
       "      <td>-27.099609</td>\n",
       "      <td>-26.367188</td>\n",
       "      <td>-23.339844</td>\n",
       "      <td>22.460938</td>\n",
       "      <td>-13.183594</td>\n",
       "      <td>-40.527344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-15.625000</td>\n",
       "      <td>-19.726562</td>\n",
       "      <td>-18.847656</td>\n",
       "      <td>-21.582031</td>\n",
       "      <td>-20.751953</td>\n",
       "      <td>-21.728516</td>\n",
       "      <td>-12.451172</td>\n",
       "      <td>-20.410156</td>\n",
       "      <td>-23.730469</td>\n",
       "      <td>-25.927734</td>\n",
       "      <td>...</td>\n",
       "      <td>-28.759766</td>\n",
       "      <td>-28.417969</td>\n",
       "      <td>-24.462891</td>\n",
       "      <td>-21.386719</td>\n",
       "      <td>-25.097656</td>\n",
       "      <td>-24.267578</td>\n",
       "      <td>-21.484375</td>\n",
       "      <td>33.691406</td>\n",
       "      <td>-8.300781</td>\n",
       "      <td>-38.574219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-16.699219</td>\n",
       "      <td>-13.720703</td>\n",
       "      <td>-20.361328</td>\n",
       "      <td>-20.849609</td>\n",
       "      <td>-24.169922</td>\n",
       "      <td>-22.021484</td>\n",
       "      <td>-10.986328</td>\n",
       "      <td>-16.357422</td>\n",
       "      <td>-25.585938</td>\n",
       "      <td>-24.951172</td>\n",
       "      <td>...</td>\n",
       "      <td>-27.783203</td>\n",
       "      <td>-28.857422</td>\n",
       "      <td>-25.537109</td>\n",
       "      <td>-19.335938</td>\n",
       "      <td>-24.316406</td>\n",
       "      <td>-24.511719</td>\n",
       "      <td>-17.919922</td>\n",
       "      <td>41.992188</td>\n",
       "      <td>-7.324219</td>\n",
       "      <td>-38.574219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-19.335938</td>\n",
       "      <td>-17.626953</td>\n",
       "      <td>-20.410156</td>\n",
       "      <td>-26.464844</td>\n",
       "      <td>-27.392578</td>\n",
       "      <td>-29.882812</td>\n",
       "      <td>-9.277344</td>\n",
       "      <td>-18.359375</td>\n",
       "      <td>-24.609375</td>\n",
       "      <td>-30.517578</td>\n",
       "      <td>...</td>\n",
       "      <td>-31.884766</td>\n",
       "      <td>-33.740234</td>\n",
       "      <td>-32.666016</td>\n",
       "      <td>-18.554688</td>\n",
       "      <td>-26.611328</td>\n",
       "      <td>-28.466797</td>\n",
       "      <td>-18.408203</td>\n",
       "      <td>37.109375</td>\n",
       "      <td>-15.136719</td>\n",
       "      <td>-49.804688</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          0          1          2          3          4          5   \\\n",
       "0 -21.142578 -23.681641 -21.484375 -25.146484 -25.732422 -27.929688   \n",
       "1 -21.923828 -23.925781 -24.316406 -25.341797 -26.074219 -25.244141   \n",
       "2 -15.625000 -19.726562 -18.847656 -21.582031 -20.751953 -21.728516   \n",
       "3 -16.699219 -13.720703 -20.361328 -20.849609 -24.169922 -22.021484   \n",
       "4 -19.335938 -17.626953 -20.410156 -26.464844 -27.392578 -29.882812   \n",
       "\n",
       "          6          7          8          9   ...         15         16  \\\n",
       "0 -14.550781 -22.509766 -25.439453 -28.710938  ... -30.615234 -29.638672   \n",
       "1 -16.064453 -22.753906 -28.320312 -29.248047  ... -31.054688 -30.712891   \n",
       "2 -12.451172 -20.410156 -23.730469 -25.927734  ... -28.759766 -28.417969   \n",
       "3 -10.986328 -16.357422 -25.585938 -24.951172  ... -27.783203 -28.857422   \n",
       "4  -9.277344 -18.359375 -24.609375 -30.517578  ... -31.884766 -33.740234   \n",
       "\n",
       "          17         18         19         20         21         22  \\\n",
       "0 -26.660156 -20.947266 -25.439453 -24.902344 -19.677734  31.738281   \n",
       "1 -26.123047 -22.998047 -27.099609 -26.367188 -23.339844  22.460938   \n",
       "2 -24.462891 -21.386719 -25.097656 -24.267578 -21.484375  33.691406   \n",
       "3 -25.537109 -19.335938 -24.316406 -24.511719 -17.919922  41.992188   \n",
       "4 -32.666016 -18.554688 -26.611328 -28.466797 -18.408203  37.109375   \n",
       "\n",
       "          23         24  \n",
       "0 -13.671875 -43.945312  \n",
       "1 -13.183594 -40.527344  \n",
       "2  -8.300781 -38.574219  \n",
       "3  -7.324219 -38.574219  \n",
       "4 -15.136719 -49.804688  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Visualizing sample_data inside subject09\n",
    "# You can see that it has 25 electrodes stored in columns\n",
    "pd.DataFrame(modified_data['subject01']['raw_EEG']).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "61523333",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:25.618286Z",
     "iopub.status.busy": "2024-06-19T16:29:25.617919Z",
     "iopub.status.idle": "2024-06-19T16:29:25.644676Z",
     "shell.execute_reply": "2024-06-19T16:29:25.643712Z"
    },
    "papermill": {
     "duration": 0.067283,
     "end_time": "2024-06-19T16:29:25.646970",
     "exception": false,
     "start_time": "2024-06-19T16:29:25.579687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>15</th>\n",
       "      <th>16</th>\n",
       "      <th>17</th>\n",
       "      <th>18</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "      <th>22</th>\n",
       "      <th>23</th>\n",
       "      <th>24</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11.230469</td>\n",
       "      <td>-27.246094</td>\n",
       "      <td>6.103516</td>\n",
       "      <td>4.882812</td>\n",
       "      <td>2.050781</td>\n",
       "      <td>-2.636719</td>\n",
       "      <td>3.027344</td>\n",
       "      <td>3.857422</td>\n",
       "      <td>4.785156</td>\n",
       "      <td>4.248047</td>\n",
       "      <td>...</td>\n",
       "      <td>6.396484</td>\n",
       "      <td>3.173828</td>\n",
       "      <td>-1.025391</td>\n",
       "      <td>5.712891</td>\n",
       "      <td>5.859375</td>\n",
       "      <td>4.345703</td>\n",
       "      <td>9.912109</td>\n",
       "      <td>3.417969</td>\n",
       "      <td>45.410156</td>\n",
       "      <td>-12.695312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9.570312</td>\n",
       "      <td>-22.558594</td>\n",
       "      <td>7.910156</td>\n",
       "      <td>8.886719</td>\n",
       "      <td>4.150391</td>\n",
       "      <td>1.562500</td>\n",
       "      <td>4.980469</td>\n",
       "      <td>7.275391</td>\n",
       "      <td>6.835938</td>\n",
       "      <td>7.617188</td>\n",
       "      <td>...</td>\n",
       "      <td>7.617188</td>\n",
       "      <td>5.126953</td>\n",
       "      <td>1.123047</td>\n",
       "      <td>5.419922</td>\n",
       "      <td>7.080078</td>\n",
       "      <td>6.689453</td>\n",
       "      <td>6.494141</td>\n",
       "      <td>3.906250</td>\n",
       "      <td>45.410156</td>\n",
       "      <td>-11.718750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10.693359</td>\n",
       "      <td>-26.123047</td>\n",
       "      <td>5.615234</td>\n",
       "      <td>6.347656</td>\n",
       "      <td>4.296875</td>\n",
       "      <td>0.292969</td>\n",
       "      <td>-2.050781</td>\n",
       "      <td>1.123047</td>\n",
       "      <td>2.929688</td>\n",
       "      <td>3.027344</td>\n",
       "      <td>...</td>\n",
       "      <td>1.367188</td>\n",
       "      <td>0.390625</td>\n",
       "      <td>-1.708984</td>\n",
       "      <td>-4.150391</td>\n",
       "      <td>-1.708984</td>\n",
       "      <td>0.195312</td>\n",
       "      <td>-3.613281</td>\n",
       "      <td>10.742188</td>\n",
       "      <td>52.246094</td>\n",
       "      <td>-2.441406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6.787109</td>\n",
       "      <td>-27.978516</td>\n",
       "      <td>1.904297</td>\n",
       "      <td>0.732422</td>\n",
       "      <td>-0.146484</td>\n",
       "      <td>-5.615234</td>\n",
       "      <td>-5.371094</td>\n",
       "      <td>-6.250000</td>\n",
       "      <td>-2.148438</td>\n",
       "      <td>-3.613281</td>\n",
       "      <td>...</td>\n",
       "      <td>-5.908203</td>\n",
       "      <td>-4.443359</td>\n",
       "      <td>-5.664062</td>\n",
       "      <td>-10.595703</td>\n",
       "      <td>-9.130859</td>\n",
       "      <td>-7.080078</td>\n",
       "      <td>-12.158203</td>\n",
       "      <td>5.371094</td>\n",
       "      <td>49.804688</td>\n",
       "      <td>-6.835938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>13.623047</td>\n",
       "      <td>-16.650391</td>\n",
       "      <td>9.570312</td>\n",
       "      <td>10.107422</td>\n",
       "      <td>8.447266</td>\n",
       "      <td>6.884766</td>\n",
       "      <td>7.373047</td>\n",
       "      <td>7.226562</td>\n",
       "      <td>8.398438</td>\n",
       "      <td>9.521484</td>\n",
       "      <td>...</td>\n",
       "      <td>7.666016</td>\n",
       "      <td>8.251953</td>\n",
       "      <td>7.666016</td>\n",
       "      <td>8.349609</td>\n",
       "      <td>7.275391</td>\n",
       "      <td>8.740234</td>\n",
       "      <td>10.302734</td>\n",
       "      <td>14.160156</td>\n",
       "      <td>62.500000</td>\n",
       "      <td>5.859375</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          0          1         2          3         4         5         6   \\\n",
       "0  11.230469 -27.246094  6.103516   4.882812  2.050781 -2.636719  3.027344   \n",
       "1   9.570312 -22.558594  7.910156   8.886719  4.150391  1.562500  4.980469   \n",
       "2  10.693359 -26.123047  5.615234   6.347656  4.296875  0.292969 -2.050781   \n",
       "3   6.787109 -27.978516  1.904297   0.732422 -0.146484 -5.615234 -5.371094   \n",
       "4  13.623047 -16.650391  9.570312  10.107422  8.447266  6.884766  7.373047   \n",
       "\n",
       "         7         8         9   ...        15        16        17         18  \\\n",
       "0  3.857422  4.785156  4.248047  ...  6.396484  3.173828 -1.025391   5.712891   \n",
       "1  7.275391  6.835938  7.617188  ...  7.617188  5.126953  1.123047   5.419922   \n",
       "2  1.123047  2.929688  3.027344  ...  1.367188  0.390625 -1.708984  -4.150391   \n",
       "3 -6.250000 -2.148438 -3.613281  ... -5.908203 -4.443359 -5.664062 -10.595703   \n",
       "4  7.226562  8.398438  9.521484  ...  7.666016  8.251953  7.666016   8.349609   \n",
       "\n",
       "         19        20         21         22         23         24  \n",
       "0  5.859375  4.345703   9.912109   3.417969  45.410156 -12.695312  \n",
       "1  7.080078  6.689453   6.494141   3.906250  45.410156 -11.718750  \n",
       "2 -1.708984  0.195312  -3.613281  10.742188  52.246094  -2.441406  \n",
       "3 -9.130859 -7.080078 -12.158203   5.371094  49.804688  -6.835938  \n",
       "4  7.275391  8.740234  10.302734  14.160156  62.500000   5.859375  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Visualizing sample_data inside subject09\n",
    "# You can see that it has 25 electrodes stored in columns\n",
    "pd.DataFrame(modified_dataE['subject01']['raw_EEG']).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58841479",
   "metadata": {
    "papermill": {
     "duration": 0.037241,
     "end_time": "2024-06-19T16:29:25.721498",
     "exception": false,
     "start_time": "2024-06-19T16:29:25.684257",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Preprocessing**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee7355f5",
   "metadata": {
    "papermill": {
     "duration": 0.03884,
     "end_time": "2024-06-19T16:29:25.799296",
     "exception": false,
     "start_time": "2024-06-19T16:29:25.760456",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1. EEG Samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "721e5ca7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:25.878020Z",
     "iopub.status.busy": "2024-06-19T16:29:25.877629Z",
     "iopub.status.idle": "2024-06-19T16:29:26.693251Z",
     "shell.execute_reply": "2024-06-19T16:29:26.692218Z"
    },
    "papermill": {
     "duration": 0.857373,
     "end_time": "2024-06-19T16:29:26.695814",
     "exception": false,
     "start_time": "2024-06-19T16:29:25.838441",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Removing last three EOG electrode using np.delete, store data as EEG_only to each subject dict\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    modified_data[subj]['raw_EEG'] = np.delete(modified_data[subj]['raw_EEG'], np.s_[22:], 1)\n",
    "    modified_dataE[subj]['raw_EEG'] = np.delete(modified_dataE[subj]['raw_EEG'], np.s_[22:], 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8b25e32b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:26.772803Z",
     "iopub.status.busy": "2024-06-19T16:29:26.772415Z",
     "iopub.status.idle": "2024-06-19T16:29:26.799766Z",
     "shell.execute_reply": "2024-06-19T16:29:26.798698Z"
    },
    "papermill": {
     "duration": 0.068457,
     "end_time": "2024-06-19T16:29:26.801906",
     "exception": false,
     "start_time": "2024-06-19T16:29:26.733449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>14</th>\n",
       "      <th>15</th>\n",
       "      <th>16</th>\n",
       "      <th>17</th>\n",
       "      <th>18</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-21.142578</td>\n",
       "      <td>-23.681641</td>\n",
       "      <td>-21.484375</td>\n",
       "      <td>-25.146484</td>\n",
       "      <td>-25.732422</td>\n",
       "      <td>-27.929688</td>\n",
       "      <td>-14.550781</td>\n",
       "      <td>-22.509766</td>\n",
       "      <td>-25.439453</td>\n",
       "      <td>-28.710938</td>\n",
       "      <td>...</td>\n",
       "      <td>-26.074219</td>\n",
       "      <td>-23.144531</td>\n",
       "      <td>-24.804688</td>\n",
       "      <td>-30.615234</td>\n",
       "      <td>-29.638672</td>\n",
       "      <td>-26.660156</td>\n",
       "      <td>-20.947266</td>\n",
       "      <td>-25.439453</td>\n",
       "      <td>-24.902344</td>\n",
       "      <td>-19.677734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-21.923828</td>\n",
       "      <td>-23.925781</td>\n",
       "      <td>-24.316406</td>\n",
       "      <td>-25.341797</td>\n",
       "      <td>-26.074219</td>\n",
       "      <td>-25.244141</td>\n",
       "      <td>-16.064453</td>\n",
       "      <td>-22.753906</td>\n",
       "      <td>-28.320312</td>\n",
       "      <td>-29.248047</td>\n",
       "      <td>...</td>\n",
       "      <td>-23.632812</td>\n",
       "      <td>-23.486328</td>\n",
       "      <td>-26.708984</td>\n",
       "      <td>-31.054688</td>\n",
       "      <td>-30.712891</td>\n",
       "      <td>-26.123047</td>\n",
       "      <td>-22.998047</td>\n",
       "      <td>-27.099609</td>\n",
       "      <td>-26.367188</td>\n",
       "      <td>-23.339844</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-15.625000</td>\n",
       "      <td>-19.726562</td>\n",
       "      <td>-18.847656</td>\n",
       "      <td>-21.582031</td>\n",
       "      <td>-20.751953</td>\n",
       "      <td>-21.728516</td>\n",
       "      <td>-12.451172</td>\n",
       "      <td>-20.410156</td>\n",
       "      <td>-23.730469</td>\n",
       "      <td>-25.927734</td>\n",
       "      <td>...</td>\n",
       "      <td>-16.845703</td>\n",
       "      <td>-22.070312</td>\n",
       "      <td>-23.828125</td>\n",
       "      <td>-28.759766</td>\n",
       "      <td>-28.417969</td>\n",
       "      <td>-24.462891</td>\n",
       "      <td>-21.386719</td>\n",
       "      <td>-25.097656</td>\n",
       "      <td>-24.267578</td>\n",
       "      <td>-21.484375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-16.699219</td>\n",
       "      <td>-13.720703</td>\n",
       "      <td>-20.361328</td>\n",
       "      <td>-20.849609</td>\n",
       "      <td>-24.169922</td>\n",
       "      <td>-22.021484</td>\n",
       "      <td>-10.986328</td>\n",
       "      <td>-16.357422</td>\n",
       "      <td>-25.585938</td>\n",
       "      <td>-24.951172</td>\n",
       "      <td>...</td>\n",
       "      <td>-22.998047</td>\n",
       "      <td>-17.675781</td>\n",
       "      <td>-24.951172</td>\n",
       "      <td>-27.783203</td>\n",
       "      <td>-28.857422</td>\n",
       "      <td>-25.537109</td>\n",
       "      <td>-19.335938</td>\n",
       "      <td>-24.316406</td>\n",
       "      <td>-24.511719</td>\n",
       "      <td>-17.919922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-19.335938</td>\n",
       "      <td>-17.626953</td>\n",
       "      <td>-20.410156</td>\n",
       "      <td>-26.464844</td>\n",
       "      <td>-27.392578</td>\n",
       "      <td>-29.882812</td>\n",
       "      <td>-9.277344</td>\n",
       "      <td>-18.359375</td>\n",
       "      <td>-24.609375</td>\n",
       "      <td>-30.517578</td>\n",
       "      <td>...</td>\n",
       "      <td>-32.617188</td>\n",
       "      <td>-18.701172</td>\n",
       "      <td>-24.609375</td>\n",
       "      <td>-31.884766</td>\n",
       "      <td>-33.740234</td>\n",
       "      <td>-32.666016</td>\n",
       "      <td>-18.554688</td>\n",
       "      <td>-26.611328</td>\n",
       "      <td>-28.466797</td>\n",
       "      <td>-18.408203</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          0          1          2          3          4          5   \\\n",
       "0 -21.142578 -23.681641 -21.484375 -25.146484 -25.732422 -27.929688   \n",
       "1 -21.923828 -23.925781 -24.316406 -25.341797 -26.074219 -25.244141   \n",
       "2 -15.625000 -19.726562 -18.847656 -21.582031 -20.751953 -21.728516   \n",
       "3 -16.699219 -13.720703 -20.361328 -20.849609 -24.169922 -22.021484   \n",
       "4 -19.335938 -17.626953 -20.410156 -26.464844 -27.392578 -29.882812   \n",
       "\n",
       "          6          7          8          9   ...         12         13  \\\n",
       "0 -14.550781 -22.509766 -25.439453 -28.710938  ... -26.074219 -23.144531   \n",
       "1 -16.064453 -22.753906 -28.320312 -29.248047  ... -23.632812 -23.486328   \n",
       "2 -12.451172 -20.410156 -23.730469 -25.927734  ... -16.845703 -22.070312   \n",
       "3 -10.986328 -16.357422 -25.585938 -24.951172  ... -22.998047 -17.675781   \n",
       "4  -9.277344 -18.359375 -24.609375 -30.517578  ... -32.617188 -18.701172   \n",
       "\n",
       "          14         15         16         17         18         19  \\\n",
       "0 -24.804688 -30.615234 -29.638672 -26.660156 -20.947266 -25.439453   \n",
       "1 -26.708984 -31.054688 -30.712891 -26.123047 -22.998047 -27.099609   \n",
       "2 -23.828125 -28.759766 -28.417969 -24.462891 -21.386719 -25.097656   \n",
       "3 -24.951172 -27.783203 -28.857422 -25.537109 -19.335938 -24.316406   \n",
       "4 -24.609375 -31.884766 -33.740234 -32.666016 -18.554688 -26.611328   \n",
       "\n",
       "          20         21  \n",
       "0 -24.902344 -19.677734  \n",
       "1 -26.367188 -23.339844  \n",
       "2 -24.267578 -21.484375  \n",
       "3 -24.511719 -17.919922  \n",
       "4 -28.466797 -18.408203  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(modified_data['subject01']['raw_EEG']).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a0c01686",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:26.879072Z",
     "iopub.status.busy": "2024-06-19T16:29:26.878752Z",
     "iopub.status.idle": "2024-06-19T16:29:26.903257Z",
     "shell.execute_reply": "2024-06-19T16:29:26.902235Z"
    },
    "papermill": {
     "duration": 0.065712,
     "end_time": "2024-06-19T16:29:26.906063",
     "exception": false,
     "start_time": "2024-06-19T16:29:26.840351",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>14</th>\n",
       "      <th>15</th>\n",
       "      <th>16</th>\n",
       "      <th>17</th>\n",
       "      <th>18</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11.230469</td>\n",
       "      <td>-27.246094</td>\n",
       "      <td>6.103516</td>\n",
       "      <td>4.882812</td>\n",
       "      <td>2.050781</td>\n",
       "      <td>-2.636719</td>\n",
       "      <td>3.027344</td>\n",
       "      <td>3.857422</td>\n",
       "      <td>4.785156</td>\n",
       "      <td>4.248047</td>\n",
       "      <td>...</td>\n",
       "      <td>-7.080078</td>\n",
       "      <td>2.294922</td>\n",
       "      <td>4.199219</td>\n",
       "      <td>6.396484</td>\n",
       "      <td>3.173828</td>\n",
       "      <td>-1.025391</td>\n",
       "      <td>5.712891</td>\n",
       "      <td>5.859375</td>\n",
       "      <td>4.345703</td>\n",
       "      <td>9.912109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9.570312</td>\n",
       "      <td>-22.558594</td>\n",
       "      <td>7.910156</td>\n",
       "      <td>8.886719</td>\n",
       "      <td>4.150391</td>\n",
       "      <td>1.562500</td>\n",
       "      <td>4.980469</td>\n",
       "      <td>7.275391</td>\n",
       "      <td>6.835938</td>\n",
       "      <td>7.617188</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.320312</td>\n",
       "      <td>3.564453</td>\n",
       "      <td>5.468750</td>\n",
       "      <td>7.617188</td>\n",
       "      <td>5.126953</td>\n",
       "      <td>1.123047</td>\n",
       "      <td>5.419922</td>\n",
       "      <td>7.080078</td>\n",
       "      <td>6.689453</td>\n",
       "      <td>6.494141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10.693359</td>\n",
       "      <td>-26.123047</td>\n",
       "      <td>5.615234</td>\n",
       "      <td>6.347656</td>\n",
       "      <td>4.296875</td>\n",
       "      <td>0.292969</td>\n",
       "      <td>-2.050781</td>\n",
       "      <td>1.123047</td>\n",
       "      <td>2.929688</td>\n",
       "      <td>3.027344</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.001953</td>\n",
       "      <td>-3.662109</td>\n",
       "      <td>-0.537109</td>\n",
       "      <td>1.367188</td>\n",
       "      <td>0.390625</td>\n",
       "      <td>-1.708984</td>\n",
       "      <td>-4.150391</td>\n",
       "      <td>-1.708984</td>\n",
       "      <td>0.195312</td>\n",
       "      <td>-3.613281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6.787109</td>\n",
       "      <td>-27.978516</td>\n",
       "      <td>1.904297</td>\n",
       "      <td>0.732422</td>\n",
       "      <td>-0.146484</td>\n",
       "      <td>-5.615234</td>\n",
       "      <td>-5.371094</td>\n",
       "      <td>-6.250000</td>\n",
       "      <td>-2.148438</td>\n",
       "      <td>-3.613281</td>\n",
       "      <td>...</td>\n",
       "      <td>-5.615234</td>\n",
       "      <td>-11.083984</td>\n",
       "      <td>-6.787109</td>\n",
       "      <td>-5.908203</td>\n",
       "      <td>-4.443359</td>\n",
       "      <td>-5.664062</td>\n",
       "      <td>-10.595703</td>\n",
       "      <td>-9.130859</td>\n",
       "      <td>-7.080078</td>\n",
       "      <td>-12.158203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>13.623047</td>\n",
       "      <td>-16.650391</td>\n",
       "      <td>9.570312</td>\n",
       "      <td>10.107422</td>\n",
       "      <td>8.447266</td>\n",
       "      <td>6.884766</td>\n",
       "      <td>7.373047</td>\n",
       "      <td>7.226562</td>\n",
       "      <td>8.398438</td>\n",
       "      <td>9.521484</td>\n",
       "      <td>...</td>\n",
       "      <td>7.666016</td>\n",
       "      <td>6.591797</td>\n",
       "      <td>5.957031</td>\n",
       "      <td>7.666016</td>\n",
       "      <td>8.251953</td>\n",
       "      <td>7.666016</td>\n",
       "      <td>8.349609</td>\n",
       "      <td>7.275391</td>\n",
       "      <td>8.740234</td>\n",
       "      <td>10.302734</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          0          1         2          3         4         5         6   \\\n",
       "0  11.230469 -27.246094  6.103516   4.882812  2.050781 -2.636719  3.027344   \n",
       "1   9.570312 -22.558594  7.910156   8.886719  4.150391  1.562500  4.980469   \n",
       "2  10.693359 -26.123047  5.615234   6.347656  4.296875  0.292969 -2.050781   \n",
       "3   6.787109 -27.978516  1.904297   0.732422 -0.146484 -5.615234 -5.371094   \n",
       "4  13.623047 -16.650391  9.570312  10.107422  8.447266  6.884766  7.373047   \n",
       "\n",
       "         7         8         9   ...        12         13        14        15  \\\n",
       "0  3.857422  4.785156  4.248047  ... -7.080078   2.294922  4.199219  6.396484   \n",
       "1  7.275391  6.835938  7.617188  ... -3.320312   3.564453  5.468750  7.617188   \n",
       "2  1.123047  2.929688  3.027344  ... -2.001953  -3.662109 -0.537109  1.367188   \n",
       "3 -6.250000 -2.148438 -3.613281  ... -5.615234 -11.083984 -6.787109 -5.908203   \n",
       "4  7.226562  8.398438  9.521484  ...  7.666016   6.591797  5.957031  7.666016   \n",
       "\n",
       "         16        17         18        19        20         21  \n",
       "0  3.173828 -1.025391   5.712891  5.859375  4.345703   9.912109  \n",
       "1  5.126953  1.123047   5.419922  7.080078  6.689453   6.494141  \n",
       "2  0.390625 -1.708984  -4.150391 -1.708984  0.195312  -3.613281  \n",
       "3 -4.443359 -5.664062 -10.595703 -9.130859 -7.080078 -12.158203  \n",
       "4  8.251953  7.666016   8.349609  7.275391  8.740234  10.302734  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(modified_dataE['subject01']['raw_EEG']).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7125ec87",
   "metadata": {
    "papermill": {
     "duration": 0.036632,
     "end_time": "2024-06-19T16:29:26.983146",
     "exception": false,
     "start_time": "2024-06-19T16:29:26.946514",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2. Reduce noise"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4668190",
   "metadata": {
    "papermill": {
     "duration": 0.039047,
     "end_time": "2024-06-19T16:29:27.059820",
     "exception": false,
     "start_time": "2024-06-19T16:29:27.020773",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Bandpass Filtering**\n",
    "\n",
    "* The first stage employing a filter bank is to decompose EEG into multiple frequency pass band, using Butterworth Filter.\n",
    "* A total of 9 band-pass filters are used, namely, 4-8, 8-12, ... 36-40 Hz\n",
    "* Prepare signals to enter CSP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "68e41729",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:27.136814Z",
     "iopub.status.busy": "2024-06-19T16:29:27.136084Z",
     "iopub.status.idle": "2024-06-19T16:29:27.142209Z",
     "shell.execute_reply": "2024-06-19T16:29:27.141298Z"
    },
    "papermill": {
     "duration": 0.046755,
     "end_time": "2024-06-19T16:29:27.144182",
     "exception": false,
     "start_time": "2024-06-19T16:29:27.097427",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def butter_bandpass_filter(signal, lowcut, highcut, fs, order=5):#order determine how strict to pass frequencies\n",
    "    nyq = 0.5 * fs#Nyquist \n",
    "    low = lowcut/nyq#Normalizes\n",
    "    high = highcut/nyq\n",
    "    b,a = butter(order, [low, high], btype='band')#'band'This parameter specifies the type of filter you want to create\n",
    "    y = lfilter(b, a, signal, axis=-1)\n",
    "    \n",
    "    return y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08270499",
   "metadata": {
    "papermill": {
     "duration": 0.037233,
     "end_time": "2024-06-19T16:29:27.219226",
     "exception": false,
     "start_time": "2024-06-19T16:29:27.181993",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "9 band-pass filter with bandwidth of:\n",
    "\n",
    "*     4-8Hz\n",
    "*     8-12Hz\n",
    "*     12-16Hz\n",
    "*     16-20Hz\n",
    "*     20-24Hz\n",
    "*     24-28Hz\n",
    "*     28-32Hz\n",
    "*     32-36Hz\n",
    "*     36-40Hz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "4f10da96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:27.298681Z",
     "iopub.status.busy": "2024-06-19T16:29:27.297920Z",
     "iopub.status.idle": "2024-06-19T16:29:27.304580Z",
     "shell.execute_reply": "2024-06-19T16:29:27.303633Z"
    },
    "papermill": {
     "duration": 0.049126,
     "end_time": "2024-06-19T16:29:27.306820",
     "exception": false,
     "start_time": "2024-06-19T16:29:27.257694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Apply filter to the time-series axis, thus set 'raw_EEG' inside each subject to shape of N x T (i.e. electrodes x samples)\n",
    "#before transpose rows represent electrodes and columns represent samples taken at different time points.\n",
    "#This operation essentially flips the matrix so that each row now represents a time point, and each column represents the EEG signal recorded from a specific electrode\n",
    "#so, enabling the filter to operate correctly on the EEG signals.\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    while modified_data[subj]['raw_EEG'].shape[0] != 22:\n",
    "        modified_data[subj]['raw_EEG'] = modified_data[subj]['raw_EEG'].T\n",
    "        modified_dataE[subj]['raw_EEG'] = modified_dataE[subj]['raw_EEG'].T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "eb6e5da5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:27.383004Z",
     "iopub.status.busy": "2024-06-19T16:29:27.382087Z",
     "iopub.status.idle": "2024-06-19T16:29:27.387571Z",
     "shell.execute_reply": "2024-06-19T16:29:27.386630Z"
    },
    "papermill": {
     "duration": 0.045058,
     "end_time": "2024-06-19T16:29:27.390261",
     "exception": false,
     "start_time": "2024-06-19T16:29:27.345203",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(22, 672528)\n",
      "(22, 677169)\n",
      "(22, 660530)\n",
      "(22, 600915)\n",
      "(22, 686120)\n",
      "(22, 678980)\n",
      "(22, 681071)\n",
      "(22, 675270)\n",
      "(22, 673328)\n"
     ]
    }
   ],
   "source": [
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    print(modified_data[subj]['raw_EEG'].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e2d7ff29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:27.467389Z",
     "iopub.status.busy": "2024-06-19T16:29:27.467053Z",
     "iopub.status.idle": "2024-06-19T16:29:27.472391Z",
     "shell.execute_reply": "2024-06-19T16:29:27.471421Z"
    },
    "papermill": {
     "duration": 0.048762,
     "end_time": "2024-06-19T16:29:27.475403",
     "exception": false,
     "start_time": "2024-06-19T16:29:27.426641",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(22, 687000)\n",
      "(22, 662666)\n",
      "(22, 648775)\n",
      "(22, 660047)\n",
      "(22, 679863)\n",
      "(22, 666373)\n",
      "(22, 673135)\n",
      "(22, 687792)\n",
      "(22, 675098)\n"
     ]
    }
   ],
   "source": [
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    print(modified_dataE[subj]['raw_EEG'].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "accf1d07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:27.557516Z",
     "iopub.status.busy": "2024-06-19T16:29:27.556653Z",
     "iopub.status.idle": "2024-06-19T16:29:27.565612Z",
     "shell.execute_reply": "2024-06-19T16:29:27.564619Z"
    },
    "papermill": {
     "duration": 0.052861,
     "end_time": "2024-06-19T16:29:27.567966",
     "exception": false,
     "start_time": "2024-06-19T16:29:27.515105",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create function that could bandpass filtered one subject\n",
    "def butter_bandpass_one_subject(data, subj, lowcut, highcut, fs, interval=None):#none because we want specific interval \n",
    "    print('Processing ', subj)\n",
    "    \n",
    "    # Create new key 'EEG_filtered' to store filtered EEG of each subject\n",
    "    data[subj]['EEG_filtered'] = {}\n",
    "    \n",
    "    # Current raw EEG\n",
    "    temp_raw_EEG = data[subj]['raw_EEG']\n",
    "    \n",
    "    if interval is not None:\n",
    "        startband = np.arange(lowcut, highcut, step = interval)\n",
    "        \n",
    "        for start in startband:\n",
    "            # This will be new key inside the EEG_filtered\n",
    "            band = \"{:02d}_{:02d}\".format(start, start+interval)\n",
    "            \n",
    "           # print('Filtering through {} Hz band'.format(band))\n",
    "            # Bandpass filtering\n",
    "            data[subj]['EEG_filtered'][band] = {}\n",
    "            data[subj]['EEG_filtered'][band]['EEG_all'] = butter_bandpass_filter(temp_raw_EEG, start, start+interval, fs)\n",
    "            \n",
    "    else:\n",
    "        # This will be new key inside the EEG_filtered\n",
    "        band = \"{:02d}_{:02d}\".format(lowcut, highcut)\n",
    "        \n",
    "        data[subj]['EEG_filtered'][band]['EEG_all'] = butter_bandpass_filter(temp_raw_EEG, lowcut, highcut, fs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "9f56c34b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:29:27.650621Z",
     "iopub.status.busy": "2024-06-19T16:29:27.649821Z",
     "iopub.status.idle": "2024-06-19T16:30:01.044627Z",
     "shell.execute_reply": "2024-06-19T16:30:01.043731Z"
    },
    "papermill": {
     "duration": 33.438869,
     "end_time": "2024-06-19T16:30:01.047176",
     "exception": false,
     "start_time": "2024-06-19T16:29:27.608307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing  subject01\n",
      "Processing  subject02\n",
      "Processing  subject03\n",
      "Processing  subject04\n",
      "Processing  subject05\n",
      "Processing  subject06\n",
      "Processing  subject07\n",
      "Processing  subject08\n",
      "Processing  subject09\n",
      "#####################\n",
      "Processing  subject01\n",
      "Processing  subject02\n",
      "Processing  subject03\n",
      "Processing  subject04\n",
      "Processing  subject05\n",
      "Processing  subject06\n",
      "Processing  subject07\n",
      "Processing  subject08\n",
      "Processing  subject09\n"
     ]
    }
   ],
   "source": [
    "# Bandpass filtering all subject \n",
    "lowcut=4\n",
    "highcut=40\n",
    "fs = 250\n",
    "\n",
    "# Iterate over all subjects\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    butter_bandpass_one_subject(modified_data, subj, lowcut, highcut, fs, interval=4)\n",
    "print('#####################')\n",
    "# Iterate over all subjects\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    butter_bandpass_one_subject(modified_dataE, subj, lowcut, highcut, fs, interval=4)\n",
    "   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9673fdd2",
   "metadata": {
    "papermill": {
     "duration": 0.036931,
     "end_time": "2024-06-19T16:30:01.124382",
     "exception": false,
     "start_time": "2024-06-19T16:30:01.087451",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Taking EEG data corresponds to left and right class\n",
    "thus the goal here is to make band-filtered EEG left and right of each class of shape T x C x N, where\n",
    "T = trial, C = channel, N = sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f29e7f7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:01.204806Z",
     "iopub.status.busy": "2024-06-19T16:30:01.203954Z",
     "iopub.status.idle": "2024-06-19T16:30:01.227690Z",
     "shell.execute_reply": "2024-06-19T16:30:01.226395Z"
    },
    "papermill": {
     "duration": 0.067207,
     "end_time": "2024-06-19T16:30:01.229946",
     "exception": false,
     "start_time": "2024-06-19T16:30:01.162739",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# First take the position of left and right class\n",
    "left_class_code = 769\n",
    "right_class_code = 770\n",
    "\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    #choose specific positions which their type (769,770)\n",
    "    modified_data[subj]['left_pos'] = original_data[subj]['epos'][original_data[subj]['etyp'] == left_class_code]\n",
    "    modified_data[subj]['right_pos'] = original_data[subj]['epos'][original_data[subj]['etyp'] == right_class_code]\n",
    "        \n",
    "    modified_dataE[subj]['left_pos'] = original_dataE[subj]['epos'][original_dataE[subj]['etyp'] == left_class_code]\n",
    "    modified_dataE[subj]['right_pos'] = original_dataE[subj]['epos'][original_dataE[subj]['etyp'] == right_class_code]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "835cd04c",
   "metadata": {
    "papermill": {
     "duration": 0.037353,
     "end_time": "2024-06-19T16:30:01.307800",
     "exception": false,
     "start_time": "2024-06-19T16:30:01.270447",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Segments EEG data into epochs from a specified time window after cue onset for both left and right classes, for each subject and each frequency band."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "35691e3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:01.384434Z",
     "iopub.status.busy": "2024-06-19T16:30:01.384063Z",
     "iopub.status.idle": "2024-06-19T16:30:02.142066Z",
     "shell.execute_reply": "2024-06-19T16:30:02.141001Z"
    },
    "papermill": {
     "duration": 0.799498,
     "end_time": "2024-06-19T16:30:02.144448",
     "exception": false,
     "start_time": "2024-06-19T16:30:01.344950",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing  subject01\n",
      "Processing  subject02\n",
      "Processing  subject03\n",
      "Processing  subject04\n",
      "Processing  subject05\n",
      "Processing  subject06\n",
      "Processing  subject07\n",
      "Processing  subject08\n",
      "Processing  subject09\n"
     ]
    }
   ],
   "source": [
    "# Now take EEG data within [0.5 3.5] seconds after cue onset position of each class\n",
    "\n",
    "start = 0.5\n",
    "end = 3.5\n",
    "\n",
    "#For each subject, and for each band in the EEG data\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    print('Processing ', subj)\n",
    "    # Temporary variable of left and right pos    \n",
    "    temp_pos_left = modified_data[subj]['left_pos']\n",
    "    temp_pos_right = modified_data[subj]['right_pos']\n",
    " \n",
    "    for band in modified_data[subj]['EEG_filtered'].keys():\n",
    "        temp_EEG_all = modified_data[subj]['EEG_filtered'][band]['EEG_all']\n",
    "        temp_EEG_left = []\n",
    "        temp_EEG_right = []\n",
    "        \n",
    "        # LEFT\n",
    "        for j in range(len(temp_pos_left)):\n",
    "            temp_EEG_left.append(temp_EEG_all[:, temp_pos_left[j] + int(start*fs) : temp_pos_left[j] + int(end*fs)])\n",
    "        modified_data[subj]['EEG_filtered'][band]['EEG_left'] = np.array(temp_EEG_left)\n",
    "        \n",
    "        # RIGHT\n",
    "        for j in range(len(temp_pos_right)):\n",
    "            temp_EEG_right.append(temp_EEG_all[:, temp_pos_right[j] + int(start*fs) : temp_pos_right[j] + int(end*fs)])\n",
    "        modified_data[subj]['EEG_filtered'][band]['EEG_right'] = np.array(temp_EEG_right)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "12998e6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:02.223373Z",
     "iopub.status.busy": "2024-06-19T16:30:02.222998Z",
     "iopub.status.idle": "2024-06-19T16:30:02.233474Z",
     "shell.execute_reply": "2024-06-19T16:30:02.232513Z"
    },
    "papermill": {
     "duration": 0.052954,
     "end_time": "2024-06-19T16:30:02.235673",
     "exception": false,
     "start_time": "2024-06-19T16:30:02.182719",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing Processing   subject01\n",
      "Testing Processing   subject02\n",
      "Testing Processing   subject03\n",
      "Testing Processing   subject04\n",
      "Testing Processing   subject05\n",
      "Testing Processing   subject06\n",
      "Testing Processing   subject07\n",
      "Testing Processing   subject08\n",
      "Testing Processing   subject09\n"
     ]
    }
   ],
   "source": [
    "# Now take EEG data within [0.5 3.5] seconds after cue onset position of each class\n",
    "\n",
    "start = 0.5\n",
    "end = 3.5\n",
    "\n",
    "# Please modify this range to add more subject\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    print('Testing Processing  ', subj)\n",
    "    # Temporary variable of left and right pos    \n",
    "    tempE_pos_left = modified_dataE[subj]['left_pos']\n",
    "    tempE_pos_right = modified_dataE[subj]['right_pos']\n",
    " \n",
    "    for band in modified_dataE[subj]['EEG_filtered'].keys():\n",
    "        tempE_EEG_all = modified_dataE[subj]['EEG_filtered'][band]['EEG_all']\n",
    "        tempE_EEG_left = []\n",
    "        tempE_EEG_right = []\n",
    "        \n",
    "        # LEFT\n",
    "        for j in range(len(tempE_pos_left)):\n",
    "            tempE_EEG_left.append(tempE_EEG_all[:, tempE_pos_left[j] + int(start*fs) : tempE_pos_left[j] + int(end*fs)])\n",
    "        modified_dataE[subj]['EEG_filtered'][band]['EEG_left'] = np.array(tempE_EEG_left)\n",
    "        \n",
    "        # RIGHT\n",
    "        for j in range(len(tempE_pos_right)):\n",
    "            tempE_EEG_right.append(tempE_EEG_all[:, tempE_pos_right[j] + int(start*fs) : tempE_pos_right[j] + int(end*fs)])\n",
    "        modified_dataE[subj]['EEG_filtered'][band]['EEG_right'] = np.array(tempE_EEG_right)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f42bc50b",
   "metadata": {
    "papermill": {
     "duration": 0.0397,
     "end_time": "2024-06-19T16:30:02.315069",
     "exception": false,
     "start_time": "2024-06-19T16:30:02.275369",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train&Test Data Split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "7f1e8bfa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:02.394889Z",
     "iopub.status.busy": "2024-06-19T16:30:02.394508Z",
     "iopub.status.idle": "2024-06-19T16:30:02.399347Z",
     "shell.execute_reply": "2024-06-19T16:30:02.398462Z"
    },
    "papermill": {
     "duration": 0.046515,
     "end_time": "2024-06-19T16:30:02.401386",
     "exception": false,
     "start_time": "2024-06-19T16:30:02.354871",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def EEG_train(EEG_one_class):\n",
    "    # Include all trials for training\n",
    "    EEG_train = EEG_one_class\n",
    "    return EEG_train\n",
    "\n",
    "def EEG_test(EEG_one_class):\n",
    "    EEG_test = EEG_one_class\n",
    "    return EEG_test\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "05a7bce6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:02.479383Z",
     "iopub.status.busy": "2024-06-19T16:30:02.479066Z",
     "iopub.status.idle": "2024-06-19T16:30:02.485458Z",
     "shell.execute_reply": "2024-06-19T16:30:02.484523Z"
    },
    "papermill": {
     "duration": 0.048424,
     "end_time": "2024-06-19T16:30:02.487651",
     "exception": false,
     "start_time": "2024-06-19T16:30:02.439227",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Iterate over all subjects\n",
    "for i in range(1, Number_subject):\n",
    "    \n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    # Iterate over all bands\n",
    "    for band in modified_data[subj]['EEG_filtered'].keys():\n",
    "        \n",
    "        # Temporary variable for left and right class of each band\n",
    "        temp_EEG_left = modified_data[subj]['EEG_filtered'][band]['EEG_left']\n",
    "        temp_EEG_right = modified_data[subj]['EEG_filtered'][band]['EEG_right']\n",
    "\n",
    "        # Temporary variable to access each band\n",
    "        temp_filt = modified_data[subj]['EEG_filtered'][band]\n",
    "        \n",
    "        temp_filt['EEG_left_train'] = EEG_train(temp_EEG_left)\n",
    "        temp_filt['EEG_right_train'] = EEG_train(temp_EEG_right)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "e19a63a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:02.567427Z",
     "iopub.status.busy": "2024-06-19T16:30:02.567050Z",
     "iopub.status.idle": "2024-06-19T16:30:02.573990Z",
     "shell.execute_reply": "2024-06-19T16:30:02.573008Z"
    },
    "papermill": {
     "duration": 0.049684,
     "end_time": "2024-06-19T16:30:02.576214",
     "exception": false,
     "start_time": "2024-06-19T16:30:02.526530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Iterate over all subjects\n",
    "for i in range(1, Number_subject):\n",
    "    \n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    # Iterate over all bands\n",
    "    for band in modified_dataE[subj]['EEG_filtered'].keys():\n",
    "        \n",
    "        # Temporary variable for left and right class of each band\n",
    "        tempE_EEG_left = modified_dataE[subj]['EEG_filtered'][band]['EEG_left']\n",
    "        tempE_EEG_right = modified_dataE[subj]['EEG_filtered'][band]['EEG_right']\n",
    "\n",
    "        # Temporary variable to access each band\n",
    "        tempE_filt = modified_dataE[subj]['EEG_filtered'][band]\n",
    "        \n",
    "        tempE_filt['EEG_left_test'] = EEG_test(temp_EEG_left)\n",
    "        tempE_filt['EEG_right_test'] = EEG_test(temp_EEG_right)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "e27459e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:02.659714Z",
     "iopub.status.busy": "2024-06-19T16:30:02.658503Z",
     "iopub.status.idle": "2024-06-19T16:30:02.666920Z",
     "shell.execute_reply": "2024-06-19T16:30:02.664928Z"
    },
    "papermill": {
     "duration": 0.052504,
     "end_time": "2024-06-19T16:30:02.669723",
     "exception": false,
     "start_time": "2024-06-19T16:30:02.617219",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['EEG_all', 'EEG_left', 'EEG_right', 'EEG_left_train', 'EEG_right_train'])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modified_data['subject05']['EEG_filtered']['04_08'].keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "48e349f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:02.747423Z",
     "iopub.status.busy": "2024-06-19T16:30:02.747051Z",
     "iopub.status.idle": "2024-06-19T16:30:02.753367Z",
     "shell.execute_reply": "2024-06-19T16:30:02.752468Z"
    },
    "papermill": {
     "duration": 0.046979,
     "end_time": "2024-06-19T16:30:02.755306",
     "exception": false,
     "start_time": "2024-06-19T16:30:02.708327",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['EEG_all', 'EEG_left', 'EEG_right', 'EEG_left_test', 'EEG_right_test'])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modified_dataE['subject05']['EEG_filtered']['04_08'].keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38d09fa9",
   "metadata": {
    "papermill": {
     "duration": 0.043159,
     "end_time": "2024-06-19T16:30:02.837156",
     "exception": false,
     "start_time": "2024-06-19T16:30:02.793997",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# CSP (Features Extraction) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "7abd8364",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:02.927845Z",
     "iopub.status.busy": "2024-06-19T16:30:02.927417Z",
     "iopub.status.idle": "2024-06-19T16:30:02.933926Z",
     "shell.execute_reply": "2024-06-19T16:30:02.932771Z"
    },
    "papermill": {
     "duration": 0.049503,
     "end_time": "2024-06-19T16:30:02.936095",
     "exception": false,
     "start_time": "2024-06-19T16:30:02.886592",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# For all subject create new keys to store all result in CSP step\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    modified_data[subj]['CSP'] = {}\n",
    "    modified_dataE[subj]['CSP'] = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "13005351",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:03.016258Z",
     "iopub.status.busy": "2024-06-19T16:30:03.015447Z",
     "iopub.status.idle": "2024-06-19T16:30:03.021524Z",
     "shell.execute_reply": "2024-06-19T16:30:03.020601Z"
    },
    "papermill": {
     "duration": 0.048733,
     "end_time": "2024-06-19T16:30:03.023686",
     "exception": false,
     "start_time": "2024-06-19T16:30:02.974953",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Covariance and Composite Covariance\n",
    "def compute_cov(EEG_data):\n",
    "    cov = []\n",
    "    for i in range(EEG_data.shape[0]):\n",
    "        cov.append(EEG_data[i]@EEG_data[i].T/np.trace(EEG_data[i]@EEG_data[i].T))#Transposing ensures that covariance calculated between channels (variables) nottime points.\n",
    "        \n",
    "    cov = np.mean(np.array(cov), 0)\n",
    "    \n",
    "    return cov\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a17a8832",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:03.104422Z",
     "iopub.status.busy": "2024-06-19T16:30:03.103627Z",
     "iopub.status.idle": "2024-06-19T16:30:04.352502Z",
     "shell.execute_reply": "2024-06-19T16:30:04.351612Z"
    },
    "papermill": {
     "duration": 1.292333,
     "end_time": "2024-06-19T16:30:04.355584",
     "exception": false,
     "start_time": "2024-06-19T16:30:03.063251",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Iterate over all subjects\n",
    "for i in range(1, Number_subject):\n",
    "    \n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    # Iterate over all bands\n",
    "    for band in modified_data[subj]['EEG_filtered'].keys():\n",
    "        \n",
    "        # New key to store result\n",
    "        temp_band = modified_data[subj]['CSP'][band] = {}\n",
    "        \n",
    "        # Compute left and right covariance\n",
    "        # LEFT\n",
    "        temp_band['cov_left'] = compute_cov(modified_data[subj]['EEG_filtered'][band]['EEG_left_train'])\n",
    "        \n",
    "        # RIGHT\n",
    "        temp_band['cov_right'] = compute_cov(modified_data[subj]['EEG_filtered'][band]['EEG_right_train'])\n",
    "        \n",
    "        # Add covariance of left and right class as composite covariance\n",
    "        temp_band['cov_comp'] = temp_band['cov_left'] + temp_band['cov_right']#(Ra+Rb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "7c1520a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:04.436395Z",
     "iopub.status.busy": "2024-06-19T16:30:04.436035Z",
     "iopub.status.idle": "2024-06-19T16:30:05.711595Z",
     "shell.execute_reply": "2024-06-19T16:30:05.710620Z"
    },
    "papermill": {
     "duration": 1.31875,
     "end_time": "2024-06-19T16:30:05.714124",
     "exception": false,
     "start_time": "2024-06-19T16:30:04.395374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Iterate over all subjects\n",
    "for i in range(1, Number_subject):\n",
    "    \n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    # Iterate over all bands\n",
    "    for band in modified_dataE[subj]['EEG_filtered'].keys():\n",
    "        \n",
    "        # New key to store result\n",
    "        temp_band = modified_dataE[subj]['CSP'][band] = {}\n",
    "        \n",
    "        # Compute left and right covariance\n",
    "        # LEFT\n",
    "        temp_band['cov_left'] = compute_cov(modified_dataE[subj]['EEG_filtered'][band]['EEG_left_test'])\n",
    "        \n",
    "        # RIGHT\n",
    "        temp_band['cov_right'] = compute_cov(modified_dataE[subj]['EEG_filtered'][band]['EEG_right_test'])\n",
    "        \n",
    "        # Add covariance of left and right class as composite covariance\n",
    "        temp_band['cov_comp'] = temp_band['cov_left'] + temp_band['cov_right']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "859e32e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:05.799064Z",
     "iopub.status.busy": "2024-06-19T16:30:05.798695Z",
     "iopub.status.idle": "2024-06-19T16:30:05.804458Z",
     "shell.execute_reply": "2024-06-19T16:30:05.803486Z"
    },
    "papermill": {
     "duration": 0.050865,
     "end_time": "2024-06-19T16:30:05.806751",
     "exception": false,
     "start_time": "2024-06-19T16:30:05.755886",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# White Matrix (P)transformation matrix\n",
    "#transforms the covariance matrix of EEG data into a diagonal matrix\n",
    "#P(trans)⋅C⋅P=I\n",
    "#remove any projection \n",
    "# Create new keys for result in whitening step\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    for band in modified_data[subj]['EEG_filtered'].keys():\n",
    "        modified_data[subj]['CSP'][band]['whitening'] = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "4c6f1c0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:05.893534Z",
     "iopub.status.busy": "2024-06-19T16:30:05.892757Z",
     "iopub.status.idle": "2024-06-19T16:30:05.898299Z",
     "shell.execute_reply": "2024-06-19T16:30:05.897348Z"
    },
    "papermill": {
     "duration": 0.051508,
     "end_time": "2024-06-19T16:30:05.900477",
     "exception": false,
     "start_time": "2024-06-19T16:30:05.848969",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# White Matrix (P)\n",
    "\n",
    "# Create new keys for result in whitening step\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    for band in modified_dataE[subj]['EEG_filtered'].keys():\n",
    "        modified_dataE[subj]['CSP'][band]['whitening'] = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "bc2e85ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:05.984458Z",
     "iopub.status.busy": "2024-06-19T16:30:05.983778Z",
     "iopub.status.idle": "2024-06-19T16:30:05.990045Z",
     "shell.execute_reply": "2024-06-19T16:30:05.989107Z"
    },
    "papermill": {
     "duration": 0.048475,
     "end_time": "2024-06-19T16:30:05.992132",
     "exception": false,
     "start_time": "2024-06-19T16:30:05.943657",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def decompose_cov(avg_cov):\n",
    "    '''\n",
    "    This function will decompose average covariance matrix of one class of each subject into \n",
    "    eigenvalues denoted by lambda and eigenvector denoted by V\n",
    "    Both will be in descending order  \n",
    "    '''\n",
    "    λ, V = np.linalg.eig(avg_cov)\n",
    "    λ_dsc = np.sort(λ)[::-1] # Sort eigenvalue descending order, default is ascending order sort\n",
    "    idx_dsc = np.argsort(λ)[::-1] # Find index in descending order\n",
    "    V_dsc = V[:, idx_dsc] # Sort eigenvectors descending order\n",
    "    λ_dsc = np.diag(λ_dsc) # Diagonalize λ_dsc\n",
    "    \n",
    "    return λ_dsc, V_dsc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "24a0c0cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:06.071669Z",
     "iopub.status.busy": "2024-06-19T16:30:06.070921Z",
     "iopub.status.idle": "2024-06-19T16:30:06.075873Z",
     "shell.execute_reply": "2024-06-19T16:30:06.075018Z"
    },
    "papermill": {
     "duration": 0.046883,
     "end_time": "2024-06-19T16:30:06.077935",
     "exception": false,
     "start_time": "2024-06-19T16:30:06.031052",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def white_matrix(λ_dsc, V_dsc):\n",
    "    \n",
    "    λ_dsc_sqr = sqrtm(inv(λ_dsc))#square root of the inverse of the diagonalized eigenvalues \n",
    "    P = (λ_dsc_sqr)@(V_dsc.T)\n",
    "    \n",
    "    return P"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "cc44bc2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:06.157472Z",
     "iopub.status.busy": "2024-06-19T16:30:06.156863Z",
     "iopub.status.idle": "2024-06-19T16:30:06.242379Z",
     "shell.execute_reply": "2024-06-19T16:30:06.241607Z"
    },
    "papermill": {
     "duration": 0.128289,
     "end_time": "2024-06-19T16:30:06.244702",
     "exception": false,
     "start_time": "2024-06-19T16:30:06.116413",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Iterate over all subject compute whitening matrix\n",
    "#computes the whitening matrix for each subject's EEG data in each frequency band\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    for band in modified_data[subj]['EEG_filtered'].keys():\n",
    "        \n",
    "        temp_whitening = modified_data[subj]['CSP'][band]['whitening']\n",
    "\n",
    "        temp_cov = modified_data[subj]['CSP'][band]['cov_comp']\n",
    "\n",
    "        # Decomposing composite covariance into eigenvector and eigenvalue\n",
    "        temp_whitening['eigval'], temp_whitening['eigvec'] = decompose_cov(temp_cov)\n",
    "\n",
    "        # White matrix\n",
    "        temp_whitening['P'] = white_matrix(temp_whitening['eigval'], temp_whitening['eigvec'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "4def8bff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:06.323369Z",
     "iopub.status.busy": "2024-06-19T16:30:06.323053Z",
     "iopub.status.idle": "2024-06-19T16:30:06.387191Z",
     "shell.execute_reply": "2024-06-19T16:30:06.386463Z"
    },
    "papermill": {
     "duration": 0.106945,
     "end_time": "2024-06-19T16:30:06.389497",
     "exception": false,
     "start_time": "2024-06-19T16:30:06.282552",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Iterate over all subject compute whitening matrix\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    for band in modified_dataE[subj]['EEG_filtered'].keys():\n",
    "        \n",
    "        temp_whitening = modified_dataE[subj]['CSP'][band]['whitening']\n",
    "\n",
    "        temp_cov = modified_dataE[subj]['CSP'][band]['cov_comp']\n",
    "\n",
    "        # Decomposing composite covariance into eigenvector and eigenvalue\n",
    "        temp_whitening['eigval'], temp_whitening['eigvec'] = decompose_cov(temp_cov)\n",
    "\n",
    "        # White matrix\n",
    "        temp_whitening['P'] = white_matrix(temp_whitening['eigval'], temp_whitening['eigvec'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "2b976770",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:06.468042Z",
     "iopub.status.busy": "2024-06-19T16:30:06.467713Z",
     "iopub.status.idle": "2024-06-19T16:30:06.473476Z",
     "shell.execute_reply": "2024-06-19T16:30:06.472595Z"
    },
    "papermill": {
     "duration": 0.047217,
     "end_time": "2024-06-19T16:30:06.475341",
     "exception": false,
     "start_time": "2024-06-19T16:30:06.428124",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Common Eigenvec from Sl and Sr\n",
    "#In this step the Sl and Sr will not be stored, will only be used to compute each eigenvector\n",
    "\n",
    "# Create new keys for result in whitening step\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    #initializes new dictionaries to store the left and right covariance matrices \n",
    "    for band in modified_data[subj]['EEG_filtered'].keys():\n",
    "        modified_data[subj]['CSP'][band]['S_left'] = {}\n",
    "        modified_data[subj]['CSP'][band]['S_right'] = {}  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "a820c8d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:06.556406Z",
     "iopub.status.busy": "2024-06-19T16:30:06.555740Z",
     "iopub.status.idle": "2024-06-19T16:30:06.561503Z",
     "shell.execute_reply": "2024-06-19T16:30:06.560547Z"
    },
    "papermill": {
     "duration": 0.049032,
     "end_time": "2024-06-19T16:30:06.563715",
     "exception": false,
     "start_time": "2024-06-19T16:30:06.514683",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Common Eigenvec from Sl and Sr\n",
    "#In this step the Sl and Sr will not be stored, will only be used to compute each eigenvector\n",
    "\n",
    "# Create new keys for result in whitening step\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    for band in modified_dataE[subj]['EEG_filtered'].keys():\n",
    "        modified_dataE[subj]['CSP'][band]['S_left'] = {}\n",
    "        modified_dataE[subj]['CSP'][band]['S_right'] = {} "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "c436fa94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:06.648136Z",
     "iopub.status.busy": "2024-06-19T16:30:06.647767Z",
     "iopub.status.idle": "2024-06-19T16:30:06.652548Z",
     "shell.execute_reply": "2024-06-19T16:30:06.651640Z"
    },
    "papermill": {
     "duration": 0.049664,
     "end_time": "2024-06-19T16:30:06.654687",
     "exception": false,
     "start_time": "2024-06-19T16:30:06.605023",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#covariance matrix of the whitened data\n",
    "def compute_S(avg_Cov, white):\n",
    "    '''\n",
    "    This function will compute S matrix, S = P * C * P.T\n",
    "    '''\n",
    "    S = white@avg_Cov@white.T\n",
    "    \n",
    "    return S"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "183d3a13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:06.736373Z",
     "iopub.status.busy": "2024-06-19T16:30:06.736055Z",
     "iopub.status.idle": "2024-06-19T16:30:06.742888Z",
     "shell.execute_reply": "2024-06-19T16:30:06.741916Z"
    },
    "papermill": {
     "duration": 0.050103,
     "end_time": "2024-06-19T16:30:06.744980",
     "exception": false,
     "start_time": "2024-06-19T16:30:06.694877",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def decompose_S(S_one_class, order='descending'):\n",
    "    '''\n",
    "    This function will decompose the S matrix of one class to get the eigen vector\n",
    "    Both eigenvector will be the same but in opposite order\n",
    "    \n",
    "    i.e the highest eigenvector in S left will be equal to lowest eigenvector in S right matrix \n",
    "    '''\n",
    "    # Decompose S\n",
    "    λ, B = np.linalg.eig(S_one_class)\n",
    "    \n",
    "    # Sort eigenvalues either descending or ascending\n",
    "    if order == 'ascending':\n",
    "        idx = λ.argsort() # Use this index to sort eigenvector smallest -> largest\n",
    "    elif order == 'descending':\n",
    "        idx = λ.argsort()[::-1] # Use this index to sort eigenvector largest -> smallest\n",
    "    else:\n",
    "        print('Wrong order input')\n",
    "    \n",
    "    λ = λ[idx]\n",
    "    B = B[:, idx]\n",
    "    \n",
    "    return B, λ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "1c7eb1d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:06.825976Z",
     "iopub.status.busy": "2024-06-19T16:30:06.825663Z",
     "iopub.status.idle": "2024-06-19T16:30:06.878284Z",
     "shell.execute_reply": "2024-06-19T16:30:06.877485Z"
    },
    "papermill": {
     "duration": 0.095688,
     "end_time": "2024-06-19T16:30:06.880641",
     "exception": false,
     "start_time": "2024-06-19T16:30:06.784953",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Iterate over all subjects\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    for band in modified_data[subj]['EEG_filtered'].keys():\n",
    "        # Where to access data\n",
    "        temp_P = modified_data[subj]['CSP'][band]['whitening']['P']\n",
    "        Cl = modified_data[subj]['CSP'][band]['cov_left']\n",
    "        Cr = modified_data[subj]['CSP'][band]['cov_right']\n",
    "\n",
    "        # Where to store result\n",
    "        temp_Sl = modified_data[subj]['CSP'][band]['S_left']\n",
    "        temp_Sr = modified_data[subj]['CSP'][band]['S_right']\n",
    "\n",
    "        # LEFT\n",
    "        Sl = compute_S(Cl, temp_P)\n",
    "        temp_Sl['eigvec'], temp_Sl['eigval'] = decompose_S(Sl, 'descending')\n",
    "\n",
    "        # RIGHT\n",
    "        Sr = compute_S(Cr, temp_P)\n",
    "        temp_Sr['eigvec'], temp_Sr['eigval'] = decompose_S(Sr, 'ascending')   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "80c6cf15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:06.964240Z",
     "iopub.status.busy": "2024-06-19T16:30:06.963484Z",
     "iopub.status.idle": "2024-06-19T16:30:07.012499Z",
     "shell.execute_reply": "2024-06-19T16:30:07.011775Z"
    },
    "papermill": {
     "duration": 0.092522,
     "end_time": "2024-06-19T16:30:07.014500",
     "exception": false,
     "start_time": "2024-06-19T16:30:06.921978",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Iterate over all subjects\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    for band in modified_dataE[subj]['EEG_filtered'].keys():\n",
    "        # Where to access data\n",
    "        temp_P = modified_dataE[subj]['CSP'][band]['whitening']['P']\n",
    "        Cl = modified_dataE[subj]['CSP'][band]['cov_left']\n",
    "        Cr = modified_dataE[subj]['CSP'][band]['cov_right']\n",
    "\n",
    "        # Where to store result\n",
    "        temp_Sl = modified_dataE[subj]['CSP'][band]['S_left']\n",
    "        temp_Sr = modified_dataE[subj]['CSP'][band]['S_right']\n",
    "\n",
    "        # LEFT\n",
    "        Sl = compute_S(Cl, temp_P)\n",
    "        temp_Sl['eigvec'], temp_Sl['eigval'] = decompose_S(Sl, 'descending')\n",
    "\n",
    "        # RIGHT\n",
    "        Sr = compute_S(Cr, temp_P)\n",
    "        temp_Sr['eigvec'], temp_Sr['eigval'] = decompose_S(Sr, 'ascending')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "a18748b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:07.096799Z",
     "iopub.status.busy": "2024-06-19T16:30:07.096214Z",
     "iopub.status.idle": "2024-06-19T16:30:07.101326Z",
     "shell.execute_reply": "2024-06-19T16:30:07.100386Z"
    },
    "papermill": {
     "duration": 0.048712,
     "end_time": "2024-06-19T16:30:07.103454",
     "exception": false,
     "start_time": "2024-06-19T16:30:07.054742",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Checking eigenvalues\n",
    "temp1 = modified_data['subject02']['CSP'][band]['S_left']['eigval']\n",
    "temp2 = modified_data['subject02']['CSP'][band]['S_right']['eigval']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "b3b4a2e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:07.183631Z",
     "iopub.status.busy": "2024-06-19T16:30:07.183056Z",
     "iopub.status.idle": "2024-06-19T16:30:07.189860Z",
     "shell.execute_reply": "2024-06-19T16:30:07.188891Z"
    },
    "papermill": {
     "duration": 0.049227,
     "end_time": "2024-06-19T16:30:07.191981",
     "exception": false,
     "start_time": "2024-06-19T16:30:07.142754",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.56783126, 0.5579046 , 0.55277493, 0.54349567, 0.54102415,\n",
       "       0.53532946, 0.5320499 , 0.52673988, 0.52004398, 0.51434682,\n",
       "       0.50832667, 0.50540215, 0.49497823, 0.48727885, 0.48648469,\n",
       "       0.4781425 , 0.46633549, 0.45964334, 0.45578981, 0.44530898,\n",
       "       0.42880853, 0.37899866])"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "5e3810ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:07.275680Z",
     "iopub.status.busy": "2024-06-19T16:30:07.275345Z",
     "iopub.status.idle": "2024-06-19T16:30:07.282771Z",
     "shell.execute_reply": "2024-06-19T16:30:07.281781Z"
    },
    "papermill": {
     "duration": 0.051715,
     "end_time": "2024-06-19T16:30:07.284971",
     "exception": false,
     "start_time": "2024-06-19T16:30:07.233256",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.43216874, 0.4420954 , 0.44722507, 0.45650433, 0.45897585,\n",
       "       0.46467054, 0.4679501 , 0.47326012, 0.47995602, 0.48565318,\n",
       "       0.49167333, 0.49459785, 0.50502177, 0.51272115, 0.51351531,\n",
       "       0.5218575 , 0.53366451, 0.54035666, 0.54421019, 0.55469102,\n",
       "       0.57119147, 0.62100134])"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "aae14314",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:07.367407Z",
     "iopub.status.busy": "2024-06-19T16:30:07.367109Z",
     "iopub.status.idle": "2024-06-19T16:30:07.373413Z",
     "shell.execute_reply": "2024-06-19T16:30:07.372507Z"
    },
    "papermill": {
     "duration": 0.047562,
     "end_time": "2024-06-19T16:30:07.375514",
     "exception": false,
     "start_time": "2024-06-19T16:30:07.327952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "       1., 1., 1., 1., 1.])"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp1 + temp2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "e292020f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:07.456694Z",
     "iopub.status.busy": "2024-06-19T16:30:07.455975Z",
     "iopub.status.idle": "2024-06-19T16:30:07.460865Z",
     "shell.execute_reply": "2024-06-19T16:30:07.459953Z"
    },
    "papermill": {
     "duration": 0.0478,
     "end_time": "2024-06-19T16:30:07.462861",
     "exception": false,
     "start_time": "2024-06-19T16:30:07.415061",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def spatial_filter(B, P):\n",
    "    '''\n",
    "    Will compute projection matrix using the following equation:\n",
    "    W = B' @ P\n",
    "    \n",
    "    INPUT:\n",
    "    B: Each eigenvector captures a specific spatial pattern\n",
    "    P: ensures that the EEG signals are decorrelated and have unit variance\n",
    "    \n",
    "    OUTPUT:\n",
    "    W spatial filter to filter EEG\n",
    "    the spatial patterns captured by the eigenvectors while reducing noise and irrelevant information.\n",
    "    '''\n",
    "    \n",
    "    return (B.T@P)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "e9a5bdbc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:07.543382Z",
     "iopub.status.busy": "2024-06-19T16:30:07.543060Z",
     "iopub.status.idle": "2024-06-19T16:30:07.550211Z",
     "shell.execute_reply": "2024-06-19T16:30:07.549286Z"
    },
    "papermill": {
     "duration": 0.050157,
     "end_time": "2024-06-19T16:30:07.552218",
     "exception": false,
     "start_time": "2024-06-19T16:30:07.502061",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Iterate over all subject\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    for band in modified_data[subj]['EEG_filtered'].keys():\n",
    "        temp_eigvec = modified_data[subj]['CSP'][band]['S_left']['eigvec']\n",
    "        temp_P = modified_data[subj]['CSP'][band]['whitening']['P']\n",
    "\n",
    "        modified_data[subj]['CSP'][band]['W'] = spatial_filter(temp_eigvec, temp_P)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "4b779b7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:07.636267Z",
     "iopub.status.busy": "2024-06-19T16:30:07.635886Z",
     "iopub.status.idle": "2024-06-19T16:30:07.643372Z",
     "shell.execute_reply": "2024-06-19T16:30:07.642364Z"
    },
    "papermill": {
     "duration": 0.053725,
     "end_time": "2024-06-19T16:30:07.645648",
     "exception": false,
     "start_time": "2024-06-19T16:30:07.591923",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Iterate over all subject\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    for band in modified_dataE[subj]['EEG_filtered'].keys():\n",
    "        temp_eigvec = modified_dataE[subj]['CSP'][band]['S_left']['eigvec']\n",
    "        temp_P = modified_dataE[subj]['CSP'][band]['whitening']['P']\n",
    "\n",
    "        modified_dataE[subj]['CSP'][band]['W'] = spatial_filter(temp_eigvec, temp_P)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "41003923",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:07.725939Z",
     "iopub.status.busy": "2024-06-19T16:30:07.725613Z",
     "iopub.status.idle": "2024-06-19T16:30:07.730146Z",
     "shell.execute_reply": "2024-06-19T16:30:07.729223Z"
    },
    "papermill": {
     "duration": 0.046756,
     "end_time": "2024-06-19T16:30:07.732130",
     "exception": false,
     "start_time": "2024-06-19T16:30:07.685374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "temp = modified_data['subject07']['CSP'][band]['W']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "6eb3951a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:07.811025Z",
     "iopub.status.busy": "2024-06-19T16:30:07.810718Z",
     "iopub.status.idle": "2024-06-19T16:30:07.814949Z",
     "shell.execute_reply": "2024-06-19T16:30:07.813994Z"
    },
    "papermill": {
     "duration": 0.046245,
     "end_time": "2024-06-19T16:30:07.816960",
     "exception": false,
     "start_time": "2024-06-19T16:30:07.770715",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "temp1 = modified_dataE['subject07']['CSP'][band]['W']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "943b5598",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:07.895387Z",
     "iopub.status.busy": "2024-06-19T16:30:07.895074Z",
     "iopub.status.idle": "2024-06-19T16:30:07.919277Z",
     "shell.execute_reply": "2024-06-19T16:30:07.918389Z"
    },
    "papermill": {
     "duration": 0.065729,
     "end_time": "2024-06-19T16:30:07.921360",
     "exception": false,
     "start_time": "2024-06-19T16:30:07.855631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>14</th>\n",
       "      <th>15</th>\n",
       "      <th>16</th>\n",
       "      <th>17</th>\n",
       "      <th>18</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.740969</td>\n",
       "      <td>1.107078</td>\n",
       "      <td>-4.072276</td>\n",
       "      <td>1.160838</td>\n",
       "      <td>0.482793</td>\n",
       "      <td>1.012240</td>\n",
       "      <td>1.260486</td>\n",
       "      <td>-0.088454</td>\n",
       "      <td>-0.127191</td>\n",
       "      <td>1.527212</td>\n",
       "      <td>...</td>\n",
       "      <td>-4.073663</td>\n",
       "      <td>-4.061158</td>\n",
       "      <td>3.901291</td>\n",
       "      <td>-3.176204</td>\n",
       "      <td>-1.218495</td>\n",
       "      <td>6.505227</td>\n",
       "      <td>1.319298</td>\n",
       "      <td>-1.156100</td>\n",
       "      <td>0.546256</td>\n",
       "      <td>-0.023724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.491748</td>\n",
       "      <td>1.017433</td>\n",
       "      <td>3.535451</td>\n",
       "      <td>-1.993988</td>\n",
       "      <td>-0.035900</td>\n",
       "      <td>2.096987</td>\n",
       "      <td>0.390499</td>\n",
       "      <td>2.806229</td>\n",
       "      <td>-14.710781</td>\n",
       "      <td>3.497705</td>\n",
       "      <td>...</td>\n",
       "      <td>1.522172</td>\n",
       "      <td>-3.034305</td>\n",
       "      <td>7.366105</td>\n",
       "      <td>-1.575775</td>\n",
       "      <td>3.969258</td>\n",
       "      <td>-1.989433</td>\n",
       "      <td>-0.109675</td>\n",
       "      <td>-3.930824</td>\n",
       "      <td>1.133815</td>\n",
       "      <td>1.774861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-3.223472</td>\n",
       "      <td>-1.832044</td>\n",
       "      <td>3.871771</td>\n",
       "      <td>0.005354</td>\n",
       "      <td>-0.256017</td>\n",
       "      <td>4.165867</td>\n",
       "      <td>-2.278640</td>\n",
       "      <td>4.629838</td>\n",
       "      <td>-2.153948</td>\n",
       "      <td>1.590444</td>\n",
       "      <td>...</td>\n",
       "      <td>0.098990</td>\n",
       "      <td>-1.301340</td>\n",
       "      <td>4.618391</td>\n",
       "      <td>-3.992745</td>\n",
       "      <td>0.714909</td>\n",
       "      <td>3.682486</td>\n",
       "      <td>-10.345825</td>\n",
       "      <td>13.475602</td>\n",
       "      <td>-6.575475</td>\n",
       "      <td>2.367715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-2.339613</td>\n",
       "      <td>-4.913978</td>\n",
       "      <td>3.232898</td>\n",
       "      <td>1.947070</td>\n",
       "      <td>0.862570</td>\n",
       "      <td>-3.373412</td>\n",
       "      <td>0.749387</td>\n",
       "      <td>4.823458</td>\n",
       "      <td>-3.683747</td>\n",
       "      <td>4.686922</td>\n",
       "      <td>...</td>\n",
       "      <td>0.663089</td>\n",
       "      <td>-1.672367</td>\n",
       "      <td>2.230653</td>\n",
       "      <td>-9.135967</td>\n",
       "      <td>1.663720</td>\n",
       "      <td>1.211788</td>\n",
       "      <td>6.222564</td>\n",
       "      <td>-3.408556</td>\n",
       "      <td>1.982562</td>\n",
       "      <td>-2.128105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.385132</td>\n",
       "      <td>-1.178242</td>\n",
       "      <td>1.778995</td>\n",
       "      <td>4.541001</td>\n",
       "      <td>-4.234183</td>\n",
       "      <td>-1.352441</td>\n",
       "      <td>4.413970</td>\n",
       "      <td>-2.561073</td>\n",
       "      <td>-2.399304</td>\n",
       "      <td>-3.663985</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.024274</td>\n",
       "      <td>0.701733</td>\n",
       "      <td>2.721518</td>\n",
       "      <td>6.026516</td>\n",
       "      <td>-10.571158</td>\n",
       "      <td>4.664142</td>\n",
       "      <td>-5.538280</td>\n",
       "      <td>2.138574</td>\n",
       "      <td>2.184488</td>\n",
       "      <td>0.469636</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         0         1         2         3         4         5         6   \\\n",
       "0  1.740969  1.107078 -4.072276  1.160838  0.482793  1.012240  1.260486   \n",
       "1  0.491748  1.017433  3.535451 -1.993988 -0.035900  2.096987  0.390499   \n",
       "2 -3.223472 -1.832044  3.871771  0.005354 -0.256017  4.165867 -2.278640   \n",
       "3 -2.339613 -4.913978  3.232898  1.947070  0.862570 -3.373412  0.749387   \n",
       "4 -0.385132 -1.178242  1.778995  4.541001 -4.234183 -1.352441  4.413970   \n",
       "\n",
       "         7          8         9   ...        12        13        14        15  \\\n",
       "0 -0.088454  -0.127191  1.527212  ... -4.073663 -4.061158  3.901291 -3.176204   \n",
       "1  2.806229 -14.710781  3.497705  ...  1.522172 -3.034305  7.366105 -1.575775   \n",
       "2  4.629838  -2.153948  1.590444  ...  0.098990 -1.301340  4.618391 -3.992745   \n",
       "3  4.823458  -3.683747  4.686922  ...  0.663089 -1.672367  2.230653 -9.135967   \n",
       "4 -2.561073  -2.399304 -3.663985  ... -0.024274  0.701733  2.721518  6.026516   \n",
       "\n",
       "          16        17         18         19        20        21  \n",
       "0  -1.218495  6.505227   1.319298  -1.156100  0.546256 -0.023724  \n",
       "1   3.969258 -1.989433  -0.109675  -3.930824  1.133815  1.774861  \n",
       "2   0.714909  3.682486 -10.345825  13.475602 -6.575475  2.367715  \n",
       "3   1.663720  1.211788   6.222564  -3.408556  1.982562 -2.128105  \n",
       "4 -10.571158  4.664142  -5.538280   2.138574  2.184488  0.469636  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(temp).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "e27557b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:08.006510Z",
     "iopub.status.busy": "2024-06-19T16:30:08.006161Z",
     "iopub.status.idle": "2024-06-19T16:30:08.030598Z",
     "shell.execute_reply": "2024-06-19T16:30:08.029689Z"
    },
    "papermill": {
     "duration": 0.06688,
     "end_time": "2024-06-19T16:30:08.032750",
     "exception": false,
     "start_time": "2024-06-19T16:30:07.965870",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>14</th>\n",
       "      <th>15</th>\n",
       "      <th>16</th>\n",
       "      <th>17</th>\n",
       "      <th>18</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.854876</td>\n",
       "      <td>-3.467376</td>\n",
       "      <td>-0.381669</td>\n",
       "      <td>0.293906</td>\n",
       "      <td>-9.117774</td>\n",
       "      <td>2.783417</td>\n",
       "      <td>2.156141</td>\n",
       "      <td>0.369883</td>\n",
       "      <td>2.601410</td>\n",
       "      <td>4.260948</td>\n",
       "      <td>...</td>\n",
       "      <td>1.076112</td>\n",
       "      <td>-0.258045</td>\n",
       "      <td>0.767818</td>\n",
       "      <td>0.082380</td>\n",
       "      <td>0.300332</td>\n",
       "      <td>0.165495</td>\n",
       "      <td>-4.925378</td>\n",
       "      <td>-5.201051</td>\n",
       "      <td>-0.448573</td>\n",
       "      <td>5.986329</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.162980</td>\n",
       "      <td>-0.258393</td>\n",
       "      <td>1.103161</td>\n",
       "      <td>2.656185</td>\n",
       "      <td>-5.879381</td>\n",
       "      <td>2.122069</td>\n",
       "      <td>-2.908927</td>\n",
       "      <td>0.241581</td>\n",
       "      <td>4.481618</td>\n",
       "      <td>-7.614377</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.743484</td>\n",
       "      <td>0.729589</td>\n",
       "      <td>-3.083771</td>\n",
       "      <td>6.101749</td>\n",
       "      <td>3.014417</td>\n",
       "      <td>-1.574917</td>\n",
       "      <td>1.762470</td>\n",
       "      <td>-10.836643</td>\n",
       "      <td>2.955852</td>\n",
       "      <td>3.544053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.696934</td>\n",
       "      <td>-3.757423</td>\n",
       "      <td>-0.716931</td>\n",
       "      <td>-0.808936</td>\n",
       "      <td>5.496611</td>\n",
       "      <td>-3.395561</td>\n",
       "      <td>1.302667</td>\n",
       "      <td>1.931198</td>\n",
       "      <td>3.199726</td>\n",
       "      <td>0.822463</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.643615</td>\n",
       "      <td>-1.646626</td>\n",
       "      <td>-7.333231</td>\n",
       "      <td>0.263436</td>\n",
       "      <td>8.702035</td>\n",
       "      <td>-2.170163</td>\n",
       "      <td>8.697355</td>\n",
       "      <td>-4.631867</td>\n",
       "      <td>-1.026273</td>\n",
       "      <td>-0.470030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.110771</td>\n",
       "      <td>-1.404179</td>\n",
       "      <td>0.944600</td>\n",
       "      <td>0.620402</td>\n",
       "      <td>1.834871</td>\n",
       "      <td>-2.273577</td>\n",
       "      <td>0.014197</td>\n",
       "      <td>-1.733888</td>\n",
       "      <td>3.748918</td>\n",
       "      <td>-0.308292</td>\n",
       "      <td>...</td>\n",
       "      <td>1.695084</td>\n",
       "      <td>4.552000</td>\n",
       "      <td>-4.604540</td>\n",
       "      <td>-6.909947</td>\n",
       "      <td>11.593630</td>\n",
       "      <td>-8.993762</td>\n",
       "      <td>-8.341476</td>\n",
       "      <td>6.528119</td>\n",
       "      <td>4.367368</td>\n",
       "      <td>-1.071938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1.987091</td>\n",
       "      <td>-0.542087</td>\n",
       "      <td>6.097510</td>\n",
       "      <td>-9.799573</td>\n",
       "      <td>3.941464</td>\n",
       "      <td>-1.461855</td>\n",
       "      <td>0.110488</td>\n",
       "      <td>0.464063</td>\n",
       "      <td>-1.846379</td>\n",
       "      <td>2.796923</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.780644</td>\n",
       "      <td>-0.073888</td>\n",
       "      <td>-1.426547</td>\n",
       "      <td>3.493415</td>\n",
       "      <td>0.462629</td>\n",
       "      <td>-4.830515</td>\n",
       "      <td>5.580757</td>\n",
       "      <td>-9.714248</td>\n",
       "      <td>8.830298</td>\n",
       "      <td>-3.014188</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         0         1         2         3         4         5         6   \\\n",
       "0  2.854876 -3.467376 -0.381669  0.293906 -9.117774  2.783417  2.156141   \n",
       "1 -0.162980 -0.258393  1.103161  2.656185 -5.879381  2.122069 -2.908927   \n",
       "2  2.696934 -3.757423 -0.716931 -0.808936  5.496611 -3.395561  1.302667   \n",
       "3 -1.110771 -1.404179  0.944600  0.620402  1.834871 -2.273577  0.014197   \n",
       "4 -1.987091 -0.542087  6.097510 -9.799573  3.941464 -1.461855  0.110488   \n",
       "\n",
       "         7         8         9   ...        12        13        14        15  \\\n",
       "0  0.369883  2.601410  4.260948  ...  1.076112 -0.258045  0.767818  0.082380   \n",
       "1  0.241581  4.481618 -7.614377  ... -0.743484  0.729589 -3.083771  6.101749   \n",
       "2  1.931198  3.199726  0.822463  ... -1.643615 -1.646626 -7.333231  0.263436   \n",
       "3 -1.733888  3.748918 -0.308292  ...  1.695084  4.552000 -4.604540 -6.909947   \n",
       "4  0.464063 -1.846379  2.796923  ... -0.780644 -0.073888 -1.426547  3.493415   \n",
       "\n",
       "          16        17        18         19        20        21  \n",
       "0   0.300332  0.165495 -4.925378  -5.201051 -0.448573  5.986329  \n",
       "1   3.014417 -1.574917  1.762470 -10.836643  2.955852  3.544053  \n",
       "2   8.702035 -2.170163  8.697355  -4.631867 -1.026273 -0.470030  \n",
       "3  11.593630 -8.993762 -8.341476   6.528119  4.367368 -1.071938  \n",
       "4   0.462629 -4.830515  5.580757  -9.714248  8.830298 -3.014188  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(temp1).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "ef468fa6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:08.113544Z",
     "iopub.status.busy": "2024-06-19T16:30:08.112713Z",
     "iopub.status.idle": "2024-06-19T16:30:08.118295Z",
     "shell.execute_reply": "2024-06-19T16:30:08.117358Z"
    },
    "papermill": {
     "duration": 0.048197,
     "end_time": "2024-06-19T16:30:08.120343",
     "exception": false,
     "start_time": "2024-06-19T16:30:08.072146",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create new keys for trainning and test feature vector\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    modified_data[subj]['train'] = {}\n",
    "   \n",
    "    \n",
    "    for band in modified_data[subj]['EEG_filtered'].keys():\n",
    "        modified_data[subj]['train'][band] = {}\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "8b4a93d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:08.199455Z",
     "iopub.status.busy": "2024-06-19T16:30:08.199173Z",
     "iopub.status.idle": "2024-06-19T16:30:08.204372Z",
     "shell.execute_reply": "2024-06-19T16:30:08.203537Z"
    },
    "papermill": {
     "duration": 0.046647,
     "end_time": "2024-06-19T16:30:08.206377",
     "exception": false,
     "start_time": "2024-06-19T16:30:08.159730",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create new keys for test feature vector\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    modified_dataE[subj]['test'] = {}\n",
    "   \n",
    "    \n",
    "    for band in modified_dataE[subj]['EEG_filtered'].keys():\n",
    "        modified_dataE[subj]['test'][band] = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "a269fd68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:08.286804Z",
     "iopub.status.busy": "2024-06-19T16:30:08.286041Z",
     "iopub.status.idle": "2024-06-19T16:30:08.292105Z",
     "shell.execute_reply": "2024-06-19T16:30:08.291229Z"
    },
    "papermill": {
     "duration": 0.048542,
     "end_time": "2024-06-19T16:30:08.294172",
     "exception": false,
     "start_time": "2024-06-19T16:30:08.245630",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Select number of filter\n",
    "m = 2\n",
    "def compute_Z(W, E, m):\n",
    "    '''\n",
    "computes the spatially filtered EEG signals by selecting the first and last m\n",
    "capture the most discriminative spatial patterns corresponding to the smallest and largest eigenvalues\n",
    "    '''\n",
    "    Z = []\n",
    "    \n",
    "    W = np.delete(W, np.s_[m:-m:], 0)#It deletes the middle rows of the spatial filter matrix W\n",
    "    #eaving only the first and last mm rows \n",
    "    \n",
    "    for i in range(E.shape[0]):\n",
    "        Z.append(W @ E[i])\n",
    "    \n",
    "    return np.array(Z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "de52df7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:08.375787Z",
     "iopub.status.busy": "2024-06-19T16:30:08.375128Z",
     "iopub.status.idle": "2024-06-19T16:30:08.381493Z",
     "shell.execute_reply": "2024-06-19T16:30:08.380608Z"
    },
    "papermill": {
     "duration": 0.049264,
     "end_time": "2024-06-19T16:30:08.383511",
     "exception": false,
     "start_time": "2024-06-19T16:30:08.334247",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def feat_vector(Z):\n",
    "    '''\n",
    "    Will compute the feature vector of Z matrix\n",
    "    \n",
    "    INPUT:\n",
    "    Z : projected EEG shape of T x N x S\n",
    "    \n",
    "    OUTPUT:\n",
    "    computes the feature vectors from the spatially filtered EEG signals by calculating \n",
    "    the logarithm of the ratio of each channel'svariance to the sum of variances across all channels.\n",
    "    \n",
    "    T = trial\n",
    "    N = channel\n",
    "    S = sample\n",
    "    m = number of filter\n",
    "    '''\n",
    "    \n",
    "    feat = []\n",
    "    \n",
    "    for i in range(Z.shape[0]):\n",
    "        var = np.var(Z[i], ddof=1, axis=1)\n",
    "        varsum = np.sum(var)\n",
    "        \n",
    "        feat.append(np.log10(var/varsum))\n",
    "        \n",
    "    return np.array(feat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "9eb1cb6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:08.463967Z",
     "iopub.status.busy": "2024-06-19T16:30:08.463672Z",
     "iopub.status.idle": "2024-06-19T16:30:08.469731Z",
     "shell.execute_reply": "2024-06-19T16:30:08.468817Z"
    },
    "papermill": {
     "duration": 0.048122,
     "end_time": "2024-06-19T16:30:08.471895",
     "exception": false,
     "start_time": "2024-06-19T16:30:08.423773",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['cov_left', 'cov_right', 'cov_comp', 'whitening', 'S_left', 'S_right', 'W'])"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modified_data['subject01']['CSP']['04_08'].keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "f229cda0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:08.554228Z",
     "iopub.status.busy": "2024-06-19T16:30:08.553376Z",
     "iopub.status.idle": "2024-06-19T16:30:08.560035Z",
     "shell.execute_reply": "2024-06-19T16:30:08.559037Z"
    },
    "papermill": {
     "duration": 0.049738,
     "end_time": "2024-06-19T16:30:08.561999",
     "exception": false,
     "start_time": "2024-06-19T16:30:08.512261",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['cov_left', 'cov_right', 'cov_comp', 'whitening', 'S_left', 'S_right', 'W'])"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modified_dataE['subject01']['CSP']['04_08'].keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "072ce0b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:08.647360Z",
     "iopub.status.busy": "2024-06-19T16:30:08.646987Z",
     "iopub.status.idle": "2024-06-19T16:30:08.653592Z",
     "shell.execute_reply": "2024-06-19T16:30:08.652621Z"
    },
    "papermill": {
     "duration": 0.05295,
     "end_time": "2024-06-19T16:30:08.655652",
     "exception": false,
     "start_time": "2024-06-19T16:30:08.602702",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['EEG_all', 'EEG_left', 'EEG_right', 'EEG_left_train', 'EEG_right_train'])"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modified_data['subject01']['EEG_filtered'][band].keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "bc1902ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:08.739213Z",
     "iopub.status.busy": "2024-06-19T16:30:08.738887Z",
     "iopub.status.idle": "2024-06-19T16:30:08.744975Z",
     "shell.execute_reply": "2024-06-19T16:30:08.744083Z"
    },
    "papermill": {
     "duration": 0.050418,
     "end_time": "2024-06-19T16:30:08.747059",
     "exception": false,
     "start_time": "2024-06-19T16:30:08.696641",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['EEG_all', 'EEG_left', 'EEG_right', 'EEG_left_test', 'EEG_right_test'])"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modified_dataE['subject01']['EEG_filtered'][band].keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "ec4b7c27",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:08.830387Z",
     "iopub.status.busy": "2024-06-19T16:30:08.830075Z",
     "iopub.status.idle": "2024-06-19T16:30:10.067575Z",
     "shell.execute_reply": "2024-06-19T16:30:10.066693Z"
    },
    "papermill": {
     "duration": 1.282632,
     "end_time": "2024-06-19T16:30:10.070183",
     "exception": false,
     "start_time": "2024-06-19T16:30:08.787551",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Iterate over all subjects\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    for band in modified_data[subj]['EEG_filtered'].keys():\n",
    "        temp_W = modified_data[subj]['CSP'][band]['W']\n",
    "        temp_EEG_left = modified_data[subj]['EEG_filtered'][band]['EEG_left_train']\n",
    "        temp_EEG_right = modified_data[subj]['EEG_filtered'][band]['EEG_right_train']\n",
    "\n",
    "        # LEFT\n",
    "        modified_data[subj]['train'][band]['Z_left'] = compute_Z(temp_W, temp_EEG_left, m)\n",
    "        modified_data[subj]['train'][band]['feat_left'] = feat_vector(modified_data[subj]['train'][band]['Z_left'])\n",
    "\n",
    "        left_label = np.zeros([len(modified_data[subj]['train'][band]['feat_left']), 1])\n",
    "        \n",
    "        # RIGHT\n",
    "        modified_data[subj]['train'][band]['Z_right'] = compute_Z(temp_W, temp_EEG_right, m)\n",
    "        modified_data[subj]['train'][band]['feat_right'] = feat_vector(modified_data[subj]['train'][band]['Z_right'])\n",
    "        \n",
    "        right_label = np.ones([len(modified_data[subj]['train'][band]['feat_right']), 1])\n",
    "        \n",
    "        left  = np.c_[modified_data[subj]['train'][band]['feat_left'], left_label]\n",
    "        right  = np.c_[modified_data[subj]['train'][band]['feat_right'], right_label] \n",
    "        \n",
    "        modified_data[subj]['train'][band]['feat_train'] = np.vstack([left, right])\n",
    "        \n",
    "        np.random.shuffle(modified_data[subj]['train'][band]['feat_train'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "601c2cac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:10.153349Z",
     "iopub.status.busy": "2024-06-19T16:30:10.152995Z",
     "iopub.status.idle": "2024-06-19T16:30:10.160411Z",
     "shell.execute_reply": "2024-06-19T16:30:10.159350Z"
    },
    "papermill": {
     "duration": 0.051567,
     "end_time": "2024-06-19T16:30:10.162656",
     "exception": false,
     "start_time": "2024-06-19T16:30:10.111089",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(144, 5)"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modified_data['subject09']['train']['04_08']['feat_train'].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "fc324ca0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:10.247303Z",
     "iopub.status.busy": "2024-06-19T16:30:10.246502Z",
     "iopub.status.idle": "2024-06-19T16:30:10.252707Z",
     "shell.execute_reply": "2024-06-19T16:30:10.251853Z"
    },
    "papermill": {
     "duration": 0.0507,
     "end_time": "2024-06-19T16:30:10.254925",
     "exception": false,
     "start_time": "2024-06-19T16:30:10.204225",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(72, 4)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modified_data['subject09']['train']['04_08']['feat_left'].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "14bba0f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:10.337399Z",
     "iopub.status.busy": "2024-06-19T16:30:10.337055Z",
     "iopub.status.idle": "2024-06-19T16:30:10.353089Z",
     "shell.execute_reply": "2024-06-19T16:30:10.352165Z"
    },
    "papermill": {
     "duration": 0.059683,
     "end_time": "2024-06-19T16:30:10.355155",
     "exception": false,
     "start_time": "2024-06-19T16:30:10.295472",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#merging feature vectors from different frequency bands and classes\n",
    "#creating true labels, and shuffling the samples\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    feat_left_all = []\n",
    "    feat_right_all = []\n",
    "    \n",
    "    for band in modified_data[subj]['EEG_filtered'].keys():\n",
    "        # Access LEFT each band\n",
    "        feat_left = modified_data[subj]['train'][band]['feat_left']\n",
    "\n",
    "        feat_left_all.append(feat_left)\n",
    "        \n",
    "        # Access RIGHT each band\n",
    "        feat_right = modified_data[subj]['train'][band]['feat_right']\n",
    "\n",
    "        feat_right_all.append(feat_right)        \n",
    "        \n",
    "    # MERGING (Need to find more efficient method)\n",
    "    # LEFT\n",
    "    merge_left = np.zeros(feat_left_all[0].shape)\n",
    "\n",
    "    for i in feat_left_all:\n",
    "        merge_left = np.concatenate([merge_left, i], axis=1)\n",
    "    \n",
    "    # Delete initial zeros\n",
    "    merge_left = np.delete(merge_left, np.s_[:2*m], axis=1)\n",
    "    \n",
    "    # RIGHT\n",
    "    merge_right = np.zeros(feat_right_all[0].shape)\n",
    "\n",
    "    for i in feat_right_all:\n",
    "        merge_right = np.concatenate([merge_right, i], axis=1)\n",
    "    \n",
    "    # Delete initial zeros\n",
    "    merge_right = np.delete(merge_right, np.s_[:2*m], axis=1)\n",
    "    \n",
    "    # TRUE LABEL\n",
    "    true_left = np.zeros([merge_left.shape[0], 1])\n",
    "    true_right = np.ones([merge_right.shape[0], 1])\n",
    "    \n",
    "    # FEATURE + TRUE LABEL\n",
    "    left = np.hstack([merge_left, true_left])\n",
    "    right = np.hstack([merge_right, true_right])    \n",
    "    \n",
    "    # MERGE LEFT AND RIGHT\n",
    "    train_feat = np.vstack([left, right])\n",
    "    \n",
    "    np.random.shuffle(train_feat)\n",
    "    \n",
    "    modified_data[subj]['train']['all_band'] = train_feat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "cd97b2c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:10.435326Z",
     "iopub.status.busy": "2024-06-19T16:30:10.435011Z",
     "iopub.status.idle": "2024-06-19T16:30:10.441170Z",
     "shell.execute_reply": "2024-06-19T16:30:10.440243Z"
    },
    "papermill": {
     "duration": 0.048188,
     "end_time": "2024-06-19T16:30:10.443189",
     "exception": false,
     "start_time": "2024-06-19T16:30:10.395001",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(144, 37)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modified_data['subject09']['train']['all_band'].shape#37 features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "a9c1041f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:10.523279Z",
     "iopub.status.busy": "2024-06-19T16:30:10.522613Z",
     "iopub.status.idle": "2024-06-19T16:30:10.528082Z",
     "shell.execute_reply": "2024-06-19T16:30:10.526946Z"
    },
    "papermill": {
     "duration": 0.048022,
     "end_time": "2024-06-19T16:30:10.530213",
     "exception": false,
     "start_time": "2024-06-19T16:30:10.482191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Sanity check(simple verification step to ensure that the output is as expected or reasonable)\n",
    "assert (modified_data['subject09']['train']['all_band'].shape == (144, 9*2*m + 1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17f7c9f5",
   "metadata": {
    "papermill": {
     "duration": 0.04094,
     "end_time": "2024-06-19T16:30:10.611717",
     "exception": false,
     "start_time": "2024-06-19T16:30:10.570777",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Select Most Informative Band"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a20ffd74",
   "metadata": {
    "papermill": {
     "duration": 0.041431,
     "end_time": "2024-06-19T16:30:10.695955",
     "exception": false,
     "start_time": "2024-06-19T16:30:10.654524",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**feature selection**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "c3a762af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:10.779812Z",
     "iopub.status.busy": "2024-06-19T16:30:10.779335Z",
     "iopub.status.idle": "2024-06-19T16:30:11.639002Z",
     "shell.execute_reply": "2024-06-19T16:30:11.637897Z"
    },
    "papermill": {
     "duration": 0.904608,
     "end_time": "2024-06-19T16:30:11.641549",
     "exception": false,
     "start_time": "2024-06-19T16:30:10.736941",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    X_train = modified_data[subj]['train']['all_band'][:, :-1]# Features (all bands except the last column)\n",
    "    y_train = modified_data[subj]['train']['all_band'][:, -1] # Labels (last column)\n",
    "    \n",
    "    # New dictionary to store result\n",
    "    modified_data[subj]['train']['mutual'] = {}\n",
    "    \n",
    "    # Use mutual information to find the most informative feature\n",
    "    select = SelectKBest(mutual_info_classif, k = 22).fit(X_train, y_train)\n",
    "    modified_data[subj]['train']['mutual']['X'] = X_train[:, select.get_support()]#selects features as the most informative\n",
    "    modified_data[subj]['train']['mutual']['y'] = y_train "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46be03e1",
   "metadata": {
    "papermill": {
     "duration": 0.039716,
     "end_time": "2024-06-19T16:30:11.721995",
     "exception": false,
     "start_time": "2024-06-19T16:30:11.682279",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature Vector Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "02ea8a54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:11.804407Z",
     "iopub.status.busy": "2024-06-19T16:30:11.803514Z",
     "iopub.status.idle": "2024-06-19T16:30:13.009913Z",
     "shell.execute_reply": "2024-06-19T16:30:13.008727Z"
    },
    "papermill": {
     "duration": 1.250782,
     "end_time": "2024-06-19T16:30:13.012626",
     "exception": false,
     "start_time": "2024-06-19T16:30:11.761844",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Seed to fix randomization\n",
    "np.random.seed(42)\n",
    "\n",
    "# Iterate over all subjects\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "\n",
    "    for band in modified_dataE[subj]['EEG_filtered'].keys():\n",
    "        if band in modified_dataE[subj]['CSP']:  # Check if the band key exists in 'CSP'\n",
    "            tempE_W = modified_dataE[subj]['CSP'][band]['W']\n",
    "            tempE_EEG_left = modified_dataE[subj]['EEG_filtered'][band]['EEG_left_test']\n",
    "            tempE_EEG_right = modified_dataE[subj]['EEG_filtered'][band]['EEG_right_test']\n",
    "\n",
    "            # LEFT\n",
    "            modified_dataE[subj]['test'][band]['Z_left'] = compute_Z(tempE_W, tempE_EEG_left, m)\n",
    "            modified_dataE[subj]['test'][band]['feat_left'] = feat_vector(modified_dataE[subj]['test'][band]['Z_left'])\n",
    "\n",
    "            left_label = np.zeros([len(modified_dataE[subj]['test'][band]['feat_left']), 1])\n",
    "\n",
    "            # RIGHT\n",
    "            modified_dataE[subj]['test'][band]['Z_right'] = compute_Z(tempE_W, tempE_EEG_right, m)\n",
    "            modified_dataE[subj]['test'][band]['feat_right'] = feat_vector(modified_dataE[subj]['test'][band]['Z_right'])\n",
    "\n",
    "            right_label = np.ones([len(modified_dataE[subj]['test'][band]['feat_right']), 1])\n",
    "\n",
    "            # MERGING LEFT, RIGHT\n",
    "            left = np.c_[modified_dataE[subj]['test'][band]['feat_left'], left_label]\n",
    "            right = np.c_[modified_dataE[subj]['test'][band]['feat_right'], right_label]\n",
    "\n",
    "            modified_dataE[subj]['test'][band]['feat_test'] = np.vstack([left, right])\n",
    "\n",
    "            np.random.shuffle(modified_dataE[subj]['test'][band]['feat_test'])\n",
    "        else:\n",
    "            print(f\"Warning: 'CSP' dictionary does not contain key '{band}'\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "228f7192",
   "metadata": {
    "papermill": {
     "duration": 0.042933,
     "end_time": "2024-06-19T16:30:13.098706",
     "exception": false,
     "start_time": "2024-06-19T16:30:13.055773",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Merging Test Feature of All Bandwidth"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "bc57957e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:13.187639Z",
     "iopub.status.busy": "2024-06-19T16:30:13.186876Z",
     "iopub.status.idle": "2024-06-19T16:30:13.203327Z",
     "shell.execute_reply": "2024-06-19T16:30:13.202570Z"
    },
    "papermill": {
     "duration": 0.063187,
     "end_time": "2024-06-19T16:30:13.205422",
     "exception": false,
     "start_time": "2024-06-19T16:30:13.142235",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Iterate over all subjects\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    feat_left_all = []\n",
    "    feat_right_all = []\n",
    "    \n",
    "    for band in modified_dataE[subj]['EEG_filtered'].keys():\n",
    "        # Access LEFT each band\n",
    "        feat_left = modified_dataE[subj]['test'][band]['feat_left']\n",
    "\n",
    "        feat_left_all.append(feat_left)\n",
    "        \n",
    "        # Access RIGHT each band\n",
    "        feat_right = modified_dataE[subj]['test'][band]['feat_right']\n",
    "\n",
    "        feat_right_all.append(feat_right)        \n",
    "        \n",
    "    \n",
    "    # MERGING (Need to find more efficient method)\n",
    "    # LEFT\n",
    "    merge_left = np.zeros(feat_left_all[0].shape)\n",
    "\n",
    "    for i in feat_left_all:\n",
    "        merge_left = np.concatenate([merge_left, i], axis=1)\n",
    "    \n",
    "    # Delete initial zeros\n",
    "    merge_left = np.delete(merge_left, np.s_[:2*m], axis=1)\n",
    "    \n",
    "    # RIGHT\n",
    "    merge_right = np.zeros(feat_right_all[0].shape)\n",
    "\n",
    "    for i in feat_right_all:\n",
    "        merge_right = np.concatenate([merge_right, i], axis=1)\n",
    "    \n",
    "    # Delete initial zeros\n",
    "    merge_right = np.delete(merge_right, np.s_[:2*m], axis=1)\n",
    "    \n",
    "    # TRUE LABEL\n",
    "    true_left = np.zeros([merge_left.shape[0], 1])\n",
    "    true_right = np.ones([merge_right.shape[0], 1])\n",
    "    \n",
    "    # FEATURE + TRUE LABEL\n",
    "    left = np.hstack([merge_left, true_left])\n",
    "    right = np.hstack([merge_right, true_right])    \n",
    "    \n",
    "    # MERGE LEFT AND RIGHT\n",
    "    test_feat = np.vstack([left, right])\n",
    "    \n",
    "    np.random.shuffle(test_feat)\n",
    "    \n",
    "    modified_dataE[subj]['test']['all_band'] = test_feat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "c84008d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:13.294762Z",
     "iopub.status.busy": "2024-06-19T16:30:13.294361Z",
     "iopub.status.idle": "2024-06-19T16:30:13.300802Z",
     "shell.execute_reply": "2024-06-19T16:30:13.299792Z"
    },
    "papermill": {
     "duration": 0.053263,
     "end_time": "2024-06-19T16:30:13.302895",
     "exception": false,
     "start_time": "2024-06-19T16:30:13.249632",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(144, 37)"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modified_dataE['subject01']['test']['all_band'].shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7b45c9c",
   "metadata": {
    "papermill": {
     "duration": 0.041583,
     "end_time": "2024-06-19T16:30:13.387289",
     "exception": false,
     "start_time": "2024-06-19T16:30:13.345706",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# MI to Select Most Informative Band Of Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "36d46427",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:13.473965Z",
     "iopub.status.busy": "2024-06-19T16:30:13.473630Z",
     "iopub.status.idle": "2024-06-19T16:30:14.308423Z",
     "shell.execute_reply": "2024-06-19T16:30:14.307431Z"
    },
    "papermill": {
     "duration": 0.880693,
     "end_time": "2024-06-19T16:30:14.310941",
     "exception": false,
     "start_time": "2024-06-19T16:30:13.430248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    X_test = modified_dataE[subj]['test']['all_band'][:, :-1]\n",
    "    y_test = modified_dataE[subj]['test']['all_band'][:, -1]\n",
    "    \n",
    "    # New dictionary to store result\n",
    "    modified_dataE[subj]['test']['mutual'] = {}\n",
    "    \n",
    "    # Use mutual information to find 4 most informative feature\n",
    "    select = SelectKBest(mutual_info_classif, k = 25).fit(X_test, y_test)\n",
    "    modified_dataE[subj]['test']['mutual']['X'] = X_test[:, select.get_support()]\n",
    "    modified_dataE[subj]['test']['mutual']['y'] = y_test    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18f4d6b0",
   "metadata": {
    "papermill": {
     "duration": 0.041719,
     "end_time": "2024-06-19T16:30:14.395425",
     "exception": false,
     "start_time": "2024-06-19T16:30:14.353706",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Classification "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abb3c582",
   "metadata": {
    "papermill": {
     "duration": 0.055322,
     "end_time": "2024-06-19T16:30:14.493207",
     "exception": false,
     "start_time": "2024-06-19T16:30:14.437885",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "3c240338",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:14.587506Z",
     "iopub.status.busy": "2024-06-19T16:30:14.587138Z",
     "iopub.status.idle": "2024-06-19T16:30:14.594518Z",
     "shell.execute_reply": "2024-06-19T16:30:14.593607Z"
    },
    "papermill": {
     "duration": 0.055715,
     "end_time": "2024-06-19T16:30:14.596972",
     "exception": false,
     "start_time": "2024-06-19T16:30:14.541257",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 1.0,\n",
       " 'break_ties': False,\n",
       " 'cache_size': 200,\n",
       " 'class_weight': None,\n",
       " 'coef0': 0.0,\n",
       " 'decision_function_shape': 'ovr',\n",
       " 'degree': 3,\n",
       " 'gamma': 'scale',\n",
       " 'kernel': 'rbf',\n",
       " 'max_iter': 3500,\n",
       " 'probability': False,\n",
       " 'random_state': None,\n",
       " 'shrinking': True,\n",
       " 'tol': 0.001,\n",
       " 'verbose': False}"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define model with specified hyperparameters\n",
    "model1 = SVC( gamma='scale',max_iter=3500)\n",
    "\n",
    "# Get the parameters of the model\n",
    "model1.get_params()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "f271b08f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:14.688945Z",
     "iopub.status.busy": "2024-06-19T16:30:14.688023Z",
     "iopub.status.idle": "2024-06-19T16:30:14.841166Z",
     "shell.execute_reply": "2024-06-19T16:30:14.840048Z"
    },
    "papermill": {
     "duration": 0.201211,
     "end_time": "2024-06-19T16:30:14.843325",
     "exception": false,
     "start_time": "2024-06-19T16:30:14.642114",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing for subject01\n",
      "Processing for subject02\n",
      "Processing for subject03\n",
      "Processing for subject04\n",
      "Processing for subject05\n",
      "Processing for subject06\n",
      "Processing for subject07\n",
      "Processing for subject08\n",
      "Processing for subject09\n"
     ]
    }
   ],
   "source": [
    "# Iterate over each subject\n",
    "eval_acc = []\n",
    "\n",
    "\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    print('Processing for {}'.format(subj))\n",
    "    X_train = modified_data[subj]['train']['mutual']['X']\n",
    "    y_train = modified_data[subj]['train']['mutual']['y']\n",
    "    \n",
    "    eval_acc.append(cross_val_score(model1, X_train, y_train).mean()*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "40f7159c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:14.932323Z",
     "iopub.status.busy": "2024-06-19T16:30:14.931543Z",
     "iopub.status.idle": "2024-06-19T16:30:14.938574Z",
     "shell.execute_reply": "2024-06-19T16:30:14.937614Z"
    },
    "papermill": {
     "duration": 0.053856,
     "end_time": "2024-06-19T16:30:14.940840",
     "exception": false,
     "start_time": "2024-06-19T16:30:14.886984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[98.5960591133005,\n",
       " 95.86206896551724,\n",
       " 97.93103448275862,\n",
       " 98.62068965517243,\n",
       " 99.3103448275862,\n",
       " 92.36453201970446,\n",
       " 100.0,\n",
       " 98.62068965517243,\n",
       " 93.79310344827587]"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eval_acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "8a1f2785",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:15.027980Z",
     "iopub.status.busy": "2024-06-19T16:30:15.027632Z",
     "iopub.status.idle": "2024-06-19T16:30:15.031951Z",
     "shell.execute_reply": "2024-06-19T16:30:15.031137Z"
    },
    "papermill": {
     "duration": 0.048819,
     "end_time": "2024-06-19T16:30:15.033908",
     "exception": false,
     "start_time": "2024-06-19T16:30:14.985089",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Necessary variable to label x axis\n",
    "subject=[]\n",
    "for i in range(1, Number_subject):\n",
    "    subject.append(subject_counter(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "4e3940ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:15.118715Z",
     "iopub.status.busy": "2024-06-19T16:30:15.118044Z",
     "iopub.status.idle": "2024-06-19T16:30:15.663350Z",
     "shell.execute_reply": "2024-06-19T16:30:15.662289Z"
    },
    "papermill": {
     "duration": 0.591308,
     "end_time": "2024-06-19T16:30:15.666152",
     "exception": false,
     "start_time": "2024-06-19T16:30:15.074844",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Accuracy for all subjects \n",
      "Subject01 : 98.60%\n",
      "Subject02 : 95.86%\n",
      "Subject03 : 97.93%\n",
      "Subject04 : 98.62%\n",
      "Subject05 : 99.31%\n",
      "Subject06 : 92.36%\n",
      "Subject07 : 100.00%\n",
      "Subject08 : 98.62%\n",
      "Subject09 : 93.79%\n"
     ]
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(6, 4), dpi=80)\n",
    "plt.rcParams.update({'font.size': 12})\n",
    "ax.set_title('Accuracy (%)')\n",
    "ax.grid(axis='y', alpha=0.5)\n",
    "ax.bar(np.arange(1, Number_subject), eval_acc, color=\"#BB8493\",  capsize=8)\n",
    "ax.set(xticks=np.arange(1, Number_subject), xlabel='Subject', \n",
    "       yticks=np.arange(0, 101, step=10), ylabel='Accuracy',\n",
    "       title='SVM Train Result')\n",
    "ax.set_axisbelow(True)\n",
    "plt.savefig('SVM_train_result.jpg', bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Print each subject accuracy\n",
    "print(\" Accuracy for all subjects \")\n",
    "for i in range(9):\n",
    "    print(\"Subject{:02d} : {:.2f}%\".format(i+1, eval_acc[i]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "2d895a64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:15.752236Z",
     "iopub.status.busy": "2024-06-19T16:30:15.751533Z",
     "iopub.status.idle": "2024-06-19T16:30:15.800894Z",
     "shell.execute_reply": "2024-06-19T16:30:15.799853Z"
    },
    "papermill": {
     "duration": 0.093884,
     "end_time": "2024-06-19T16:30:15.803211",
     "exception": false,
     "start_time": "2024-06-19T16:30:15.709327",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Blank list to store accuracy values\n",
    "train_score = []\n",
    "test_score = []\n",
    "\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    # Prepare train and test data\n",
    "    data_train = modified_data[subj]['train']['mutual']\n",
    "    X_train = data_train['X']\n",
    "    y_train = data_train['y']\n",
    "    \n",
    "    data_test = modified_dataE[subj]['test']['mutual']\n",
    "    X_test = data_train['X']\n",
    "    y_test = data_train['y']\n",
    "    \n",
    "    # Training the model + train accuracy\n",
    "    model1.fit(X_train, y_train)\n",
    "    tr_score = model1.score(X_train, y_train)*100\n",
    "    te_score = model1.score(X_test, y_test)*100\n",
    "    \n",
    "    train_score.append(tr_score)\n",
    "    test_score.append(te_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "638a08d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:15.892773Z",
     "iopub.status.busy": "2024-06-19T16:30:15.891938Z",
     "iopub.status.idle": "2024-06-19T16:30:16.428544Z",
     "shell.execute_reply": "2024-06-19T16:30:16.427582Z"
    },
    "papermill": {
     "duration": 0.584758,
     "end_time": "2024-06-19T16:30:16.431862",
     "exception": false,
     "start_time": "2024-06-19T16:30:15.847104",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy for all subjects \n",
      "Subject01 : 99.31 %\n",
      "Subject02 : 98.61 %\n",
      "Subject03 : 100.00 %\n",
      "Subject04 : 100.00 %\n",
      "Subject05 : 100.00 %\n",
      "Subject06 : 97.22 %\n",
      "Subject07 : 100.00 %\n",
      "Subject08 : 100.00 %\n",
      "Subject09 : 95.83 %\n"
     ]
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(6, 4), dpi=80)\n",
    "plt.rcParams.update({'font.size': 12})\n",
    "ax.set_title('Accuracy (%)')\n",
    "ax.grid(axis='y', alpha=0.5)\n",
    "ax.bar(np.arange(1, Number_subject), test_score, color=\"#704264\")\n",
    "ax.set(xticks=np.arange(1, Number_subject), xlabel='Subject', \n",
    "       yticks=np.arange(0, 101, step=10), ylabel='Accuracy',\n",
    "       title='SVM Test Result')\n",
    "ax.set_axisbelow(True)\n",
    "plt.savefig('SVM_test_result.jpg', bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Print each subject accuracy\n",
    "print(\"Test Accuracy for all subjects \")\n",
    "for i in range(9):\n",
    "    print(\"Subject{:02d} : {:.2f} %\".format(i+1, test_score[i]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc5fd19c",
   "metadata": {
    "papermill": {
     "duration": 0.041556,
     "end_time": "2024-06-19T16:30:16.517870",
     "exception": false,
     "start_time": "2024-06-19T16:30:16.476314",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# KNN "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "592e754b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:16.606103Z",
     "iopub.status.busy": "2024-06-19T16:30:16.605388Z",
     "iopub.status.idle": "2024-06-19T16:30:16.612765Z",
     "shell.execute_reply": "2024-06-19T16:30:16.611910Z"
    },
    "papermill": {
     "duration": 0.054068,
     "end_time": "2024-06-19T16:30:16.615296",
     "exception": false,
     "start_time": "2024-06-19T16:30:16.561228",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'algorithm': 'auto',\n",
       " 'leaf_size': 30,\n",
       " 'metric': 'minkowski',\n",
       " 'metric_params': None,\n",
       " 'n_jobs': None,\n",
       " 'n_neighbors': 50,\n",
       " 'p': 2,\n",
       " 'weights': 'uniform'}"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "# Define model with specified hyperparameters\n",
    "model2 = KNeighborsClassifier(n_neighbors=50)  # You can adjust n_neighbors as needed\n",
    "# Get the parameters of the model\n",
    "model2.get_params()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "29ffeb03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:16.704158Z",
     "iopub.status.busy": "2024-06-19T16:30:16.703287Z",
     "iopub.status.idle": "2024-06-19T16:30:17.021346Z",
     "shell.execute_reply": "2024-06-19T16:30:17.020226Z"
    },
    "papermill": {
     "duration": 0.364726,
     "end_time": "2024-06-19T16:30:17.023348",
     "exception": false,
     "start_time": "2024-06-19T16:30:16.658622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing for subject01\n",
      "Processing for subject02\n",
      "Processing for subject03\n",
      "Processing for subject04\n",
      "Processing for subject05\n",
      "Processing for subject06\n",
      "Processing for subject07\n",
      "Processing for subject08\n",
      "Processing for subject09\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[98.5960591133005,\n",
       " 95.86206896551724,\n",
       " 96.5270935960591,\n",
       " 97.24137931034484,\n",
       " 99.3103448275862,\n",
       " 91.67487684729065,\n",
       " 100.0,\n",
       " 98.62068965517243,\n",
       " 90.32019704433496]"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Iterate over each subject\n",
    "eval_acc = []\n",
    "\n",
    "\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    print('Processing for {}'.format(subj))\n",
    "    X_train = modified_data[subj]['train']['mutual']['X']\n",
    "    y_train = modified_data[subj]['train']['mutual']['y']\n",
    "    \n",
    "    eval_acc.append(cross_val_score(model2, X_train, y_train).mean()*100)\n",
    "    \n",
    "eval_acc    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "c507a29b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:17.111792Z",
     "iopub.status.busy": "2024-06-19T16:30:17.110878Z",
     "iopub.status.idle": "2024-06-19T16:30:18.407816Z",
     "shell.execute_reply": "2024-06-19T16:30:18.406723Z"
    },
    "papermill": {
     "duration": 1.343412,
     "end_time": "2024-06-19T16:30:18.410732",
     "exception": false,
     "start_time": "2024-06-19T16:30:17.067320",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Accuracy for all subjects \n",
      "Subject01 : 98.60%\n",
      "Subject02 : 95.86%\n",
      "Subject03 : 96.53%\n",
      "Subject04 : 97.24%\n",
      "Subject05 : 99.31%\n",
      "Subject06 : 91.67%\n",
      "Subject07 : 100.00%\n",
      "Subject08 : 98.62%\n",
      "Subject09 : 90.32%\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy for all subjects \n",
      "Subject01 : 98.61 %\n",
      "Subject02 : 93.75 %\n",
      "Subject03 : 97.92 %\n",
      "Subject04 : 99.31 %\n",
      "Subject05 : 99.31 %\n",
      "Subject06 : 93.75 %\n",
      "Subject07 : 100.00 %\n",
      "Subject08 : 98.61 %\n",
      "Subject09 : 90.97 %\n"
     ]
    }
   ],
   "source": [
    "# Necessary variable to label x axis\n",
    "subject=[]\n",
    "for i in range(1, Number_subject):\n",
    "    subject.append(subject_counter(i))\n",
    "    \n",
    "fig, ax = plt.subplots(figsize=(6, 4), dpi=80)\n",
    "plt.rcParams.update({'font.size': 12})\n",
    "ax.set_title('Accuracy (%)')\n",
    "ax.grid(axis='y', alpha=0.5)\n",
    "ax.bar(np.arange(1, Number_subject), eval_acc, color=\"#78A083\",  capsize=8)\n",
    "ax.set(xticks=np.arange(1, Number_subject), xlabel='Subject', \n",
    "       yticks=np.arange(0, 101, step=10), ylabel='Accuracy',\n",
    "       title='KNN Train Result')\n",
    "ax.set_axisbelow(True)\n",
    "plt.savefig('KNNResult.jpg', bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Print each subject accuracy\n",
    "print(\" Accuracy for all subjects \")\n",
    "for i in range(9):\n",
    "    print(\"Subject{:02d} : {:.2f}%\".format(i+1, eval_acc[i]))\n",
    "\n",
    "# Blank list to store accuracy values\n",
    "train_score = []\n",
    "test_score = []\n",
    "\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    # Prepare train and test data\n",
    "    data_train = modified_data[subj]['train']['mutual']\n",
    "    X_train = data_train['X']\n",
    "    y_train = data_train['y']\n",
    "    \n",
    "    data_test = modified_dataE[subj]['test']['mutual']\n",
    "    X_test = data_train['X']\n",
    "    y_test = data_train['y']\n",
    "    \n",
    "    # Training the model + train accuracy\n",
    "    model2.fit(X_train, y_train)\n",
    "    tr_score = model2.score(X_train, y_train)*100\n",
    "    te_score = model2.score(X_test, y_test)*100\n",
    "    \n",
    "    train_score.append(tr_score)\n",
    "    test_score.append(te_score)\n",
    "    \n",
    "fig, ax = plt.subplots(figsize=(6, 4), dpi=80)\n",
    "plt.rcParams.update({'font.size': 12})\n",
    "ax.set_title('Accuracy (%)')\n",
    "ax.grid(axis='y', alpha=0.5)\n",
    "ax.bar(np.arange(1, Number_subject), test_score, color=\"#114232\")\n",
    "ax.set(xticks=np.arange(1, Number_subject), xlabel='Subject', \n",
    "       yticks=np.arange(0, 101, step=10), ylabel='Accuracy',\n",
    "       title='KNN Test Result')\n",
    "ax.set_axisbelow(True)\n",
    "plt.savefig('KNNtestResult.jpg', bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Print each subject accuracy\n",
    "print(\"Test Accuracy for all subjects \")\n",
    "for i in range(9):\n",
    "    print(\"Subject{:02d} : {:.2f} %\".format(i+1, test_score[i]))    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "495732f6",
   "metadata": {
    "papermill": {
     "duration": 0.042629,
     "end_time": "2024-06-19T16:30:18.497815",
     "exception": false,
     "start_time": "2024-06-19T16:30:18.455186",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "80002ef0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:18.587101Z",
     "iopub.status.busy": "2024-06-19T16:30:18.586302Z",
     "iopub.status.idle": "2024-06-19T16:30:18.593969Z",
     "shell.execute_reply": "2024-06-19T16:30:18.593104Z"
    },
    "papermill": {
     "duration": 0.055225,
     "end_time": "2024-06-19T16:30:18.596072",
     "exception": false,
     "start_time": "2024-06-19T16:30:18.540847",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 0.5,\n",
       " 'class_weight': None,\n",
       " 'dual': False,\n",
       " 'fit_intercept': True,\n",
       " 'intercept_scaling': 1,\n",
       " 'l1_ratio': None,\n",
       " 'max_iter': 3500,\n",
       " 'multi_class': 'auto',\n",
       " 'n_jobs': None,\n",
       " 'penalty': 'l2',\n",
       " 'random_state': None,\n",
       " 'solver': 'lbfgs',\n",
       " 'tol': 0.0001,\n",
       " 'verbose': 0,\n",
       " 'warm_start': False}"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "# Define model with specified hyperparameters\n",
    "model3 = LogisticRegression(max_iter=3500,C=0.5)  # You can adjust max_iter as needed\n",
    "\n",
    "# Get the parameters of the model\n",
    "model3.get_params()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "25ed6015",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:18.687828Z",
     "iopub.status.busy": "2024-06-19T16:30:18.686861Z",
     "iopub.status.idle": "2024-06-19T16:30:19.007979Z",
     "shell.execute_reply": "2024-06-19T16:30:19.006816Z"
    },
    "papermill": {
     "duration": 0.368121,
     "end_time": "2024-06-19T16:30:19.010741",
     "exception": false,
     "start_time": "2024-06-19T16:30:18.642620",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing for subject01\n",
      "Processing for subject02\n",
      "Processing for subject03\n",
      "Processing for subject04\n",
      "Processing for subject05\n",
      "Processing for subject06\n",
      "Processing for subject07\n",
      "Processing for subject08\n",
      "Processing for subject09\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[98.5960591133005,\n",
       " 95.86206896551724,\n",
       " 97.21674876847291,\n",
       " 97.93103448275862,\n",
       " 99.3103448275862,\n",
       " 92.36453201970446,\n",
       " 100.0,\n",
       " 98.62068965517243,\n",
       " 91.00985221674875]"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Iterate over each subject\n",
    "eval_acc = []\n",
    "\n",
    "\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    print('Processing for {}'.format(subj))\n",
    "    X_train = modified_data[subj]['train']['mutual']['X']\n",
    "    y_train = modified_data[subj]['train']['mutual']['y']\n",
    "    \n",
    "    eval_acc.append(cross_val_score(model3, X_train, y_train).mean()*100)\n",
    "    \n",
    "eval_acc    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "92f128fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:19.103335Z",
     "iopub.status.busy": "2024-06-19T16:30:19.102996Z",
     "iopub.status.idle": "2024-06-19T16:30:20.130532Z",
     "shell.execute_reply": "2024-06-19T16:30:20.129483Z"
    },
    "papermill": {
     "duration": 1.076178,
     "end_time": "2024-06-19T16:30:20.133064",
     "exception": false,
     "start_time": "2024-06-19T16:30:19.056886",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Accuracy for all subjects \n",
      "Subject01 : 98.60%\n",
      "Subject02 : 95.86%\n",
      "Subject03 : 97.22%\n",
      "Subject04 : 97.93%\n",
      "Subject05 : 99.31%\n",
      "Subject06 : 92.36%\n",
      "Subject07 : 100.00%\n",
      "Subject08 : 98.62%\n",
      "Subject09 : 91.01%\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy for all subjects \n",
      "Subject01 : 98.61 %\n",
      "Subject02 : 95.83 %\n",
      "Subject03 : 98.61 %\n",
      "Subject04 : 99.31 %\n",
      "Subject05 : 100.00 %\n",
      "Subject06 : 93.75 %\n",
      "Subject07 : 100.00 %\n",
      "Subject08 : 99.31 %\n",
      "Subject09 : 92.36 %\n"
     ]
    }
   ],
   "source": [
    "# Necessary variable to label x axis\n",
    "subject=[]\n",
    "for i in range(1, Number_subject):\n",
    "    subject.append(subject_counter(i))\n",
    "    \n",
    "fig, ax = plt.subplots(figsize=(6, 4), dpi=80)\n",
    "plt.rcParams.update({'font.size': 12})\n",
    "ax.set_title('Accuracy (%)')\n",
    "ax.grid(axis='y', alpha=0.5)\n",
    "ax.bar(np.arange(1, Number_subject), eval_acc, color=\"#FFCCCC\",  capsize=8)\n",
    "ax.set(xticks=np.arange(1, Number_subject), xlabel='Subject', \n",
    "       yticks=np.arange(0, 101, step=10), ylabel='Accuracy',\n",
    "       title='Logistic Regression Train Result')\n",
    "ax.set_axisbelow(True)\n",
    "plt.savefig('LogisticRegressionTrainResult.jpg', bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Print each subject accuracy\n",
    "print(\" Accuracy for all subjects \")\n",
    "for i in range(9):\n",
    "    print(\"Subject{:02d} : {:.2f}%\".format(i+1, eval_acc[i]))\n",
    "\n",
    "# Blank list to store accuracy values\n",
    "train_score = []\n",
    "test_score = []\n",
    "\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    # Prepare train and test data\n",
    "    data_train = modified_data[subj]['train']['mutual']\n",
    "    X_train = data_train['X']\n",
    "    y_train = data_train['y']\n",
    "    \n",
    "    data_test = modified_dataE[subj]['test']['mutual']\n",
    "    X_test = data_train['X']\n",
    "    y_test = data_train['y']\n",
    "    \n",
    "    # Training the model + train accuracy\n",
    "    model3.fit(X_train, y_train)\n",
    "    tr_score = model3.score(X_train, y_train)*100\n",
    "    te_score = model3.score(X_test, y_test)*100\n",
    "    \n",
    "    train_score.append(tr_score)\n",
    "    test_score.append(te_score)\n",
    "    \n",
    "fig, ax = plt.subplots(figsize=(6, 4), dpi=80)\n",
    "plt.rcParams.update({'font.size': 12})\n",
    "ax.set_title('Accuracy (%)')\n",
    "ax.grid(axis='y', alpha=0.5)\n",
    "ax.bar(np.arange(1, Number_subject), test_score, color=\"#FF70AB\")\n",
    "ax.set(xticks=np.arange(1, Number_subject), xlabel='Subject', \n",
    "       yticks=np.arange(0, 101, step=10), ylabel='Accuracy',\n",
    "       title='Logistic Regression Test Result')\n",
    "ax.set_axisbelow(True)\n",
    "plt.savefig('LogisticRegressionTestResult.jpg', bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Print each subject accuracy\n",
    "print(\"Test Accuracy for all subjects \")\n",
    "for i in range(9):\n",
    "    print(\"Subject{:02d} : {:.2f} %\".format(i+1, test_score[i]))    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b60aa6e",
   "metadata": {
    "papermill": {
     "duration": 0.046632,
     "end_time": "2024-06-19T16:30:20.226015",
     "exception": false,
     "start_time": "2024-06-19T16:30:20.179383",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Decision Tree "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "0bd7087e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:20.317368Z",
     "iopub.status.busy": "2024-06-19T16:30:20.316733Z",
     "iopub.status.idle": "2024-06-19T16:30:20.349349Z",
     "shell.execute_reply": "2024-06-19T16:30:20.348354Z"
    },
    "papermill": {
     "duration": 0.081026,
     "end_time": "2024-06-19T16:30:20.351479",
     "exception": false,
     "start_time": "2024-06-19T16:30:20.270453",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'ccp_alpha': 0.0,\n",
       " 'class_weight': None,\n",
       " 'criterion': 'gini',\n",
       " 'max_depth': None,\n",
       " 'max_features': None,\n",
       " 'max_leaf_nodes': None,\n",
       " 'min_impurity_decrease': 0.0,\n",
       " 'min_samples_leaf': 1,\n",
       " 'min_samples_split': 2,\n",
       " 'min_weight_fraction_leaf': 0.0,\n",
       " 'random_state': None,\n",
       " 'splitter': 'best'}"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "model4= DecisionTreeClassifier()  \n",
    "\n",
    "# Get the parameters of the model\n",
    "model4.get_params()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "8ab979b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:20.440596Z",
     "iopub.status.busy": "2024-06-19T16:30:20.440245Z",
     "iopub.status.idle": "2024-06-19T16:30:20.576431Z",
     "shell.execute_reply": "2024-06-19T16:30:20.575475Z"
    },
    "papermill": {
     "duration": 0.182362,
     "end_time": "2024-06-19T16:30:20.578571",
     "exception": false,
     "start_time": "2024-06-19T16:30:20.396209",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing for subject01\n",
      "Processing for subject02\n",
      "Processing for subject03\n",
      "Processing for subject04\n",
      "Processing for subject05\n",
      "Processing for subject06\n",
      "Processing for subject07\n",
      "Processing for subject08\n",
      "Processing for subject09\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[85.46798029556652,\n",
       " 79.90147783251231,\n",
       " 92.33990147783253,\n",
       " 79.21182266009852,\n",
       " 90.2463054187192,\n",
       " 75.6896551724138,\n",
       " 91.67487684729065,\n",
       " 96.5270935960591,\n",
       " 89.63054187192118]"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Iterate over each subject\n",
    "eval_acc = []\n",
    "\n",
    "\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    print('Processing for {}'.format(subj))\n",
    "    X_train = modified_data[subj]['train']['mutual']['X']\n",
    "    y_train = modified_data[subj]['train']['mutual']['y']\n",
    "    \n",
    "    eval_acc.append(cross_val_score(model4, X_train, y_train).mean()*100)\n",
    "    \n",
    "eval_acc    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "fc86d763",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:20.674372Z",
     "iopub.status.busy": "2024-06-19T16:30:20.673990Z",
     "iopub.status.idle": "2024-06-19T16:30:21.671094Z",
     "shell.execute_reply": "2024-06-19T16:30:21.670161Z"
    },
    "papermill": {
     "duration": 1.047321,
     "end_time": "2024-06-19T16:30:21.674104",
     "exception": false,
     "start_time": "2024-06-19T16:30:20.626783",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Accuracy for all subjects \n",
      "Subject01 : 85.47%\n",
      "Subject02 : 79.90%\n",
      "Subject03 : 92.34%\n",
      "Subject04 : 79.21%\n",
      "Subject05 : 90.25%\n",
      "Subject06 : 75.69%\n",
      "Subject07 : 91.67%\n",
      "Subject08 : 96.53%\n",
      "Subject09 : 89.63%\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy for all subjects \n",
      "Subject01 : 100.00 %\n",
      "Subject02 : 100.00 %\n",
      "Subject03 : 100.00 %\n",
      "Subject04 : 100.00 %\n",
      "Subject05 : 100.00 %\n",
      "Subject06 : 100.00 %\n",
      "Subject07 : 100.00 %\n",
      "Subject08 : 100.00 %\n",
      "Subject09 : 100.00 %\n"
     ]
    }
   ],
   "source": [
    "# Necessary variable to label x axis\n",
    "subject=[]\n",
    "for i in range(1, Number_subject):\n",
    "    subject.append(subject_counter(i))\n",
    "    \n",
    "fig, ax = plt.subplots(figsize=(6, 4), dpi=80)\n",
    "plt.rcParams.update({'font.size': 12})\n",
    "ax.set_title('Accuracy (%)')\n",
    "ax.grid(axis='y', alpha=0.5)\n",
    "ax.bar(np.arange(1, Number_subject), eval_acc, color=\"#A0153E\",  capsize=8)\n",
    "ax.set(xticks=np.arange(1, Number_subject), xlabel='Subject', \n",
    "       yticks=np.arange(0, 101, step=10), ylabel='Accuracy',\n",
    "       title='Decision Tree Train Result')\n",
    "ax.set_axisbelow(True)\n",
    "plt.savefig('DecisionTreetrain.jpg', bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Print each subject accuracy\n",
    "print(\" Accuracy for all subjects \")\n",
    "for i in range(9):\n",
    "    print(\"Subject{:02d} : {:.2f}%\".format(i+1, eval_acc[i]))\n",
    "\n",
    "# Blank list to store accuracy values\n",
    "train_score = []\n",
    "test_score = []\n",
    "\n",
    "for i in range(1, Number_subject):\n",
    "    subj = subject_counter(i)\n",
    "    \n",
    "    # Prepare train and test data\n",
    "    data_train = modified_data[subj]['train']['mutual']\n",
    "    X_train = data_train['X']\n",
    "    y_train = data_train['y']\n",
    "    \n",
    "    data_test = modified_dataE[subj]['test']['mutual']\n",
    "    X_test = data_train['X']\n",
    "    y_test = data_train['y']\n",
    "    \n",
    "    # Training the model + train accuracy\n",
    "    model4.fit(X_train, y_train)\n",
    "    tr_score = model4.score(X_train, y_train)*100\n",
    "    te_score = model4.score(X_test, y_test)*100\n",
    "    \n",
    "    train_score.append(tr_score)\n",
    "    test_score.append(te_score)\n",
    "    \n",
    "fig, ax = plt.subplots(figsize=(6, 4), dpi=80)\n",
    "plt.rcParams.update({'font.size': 12})\n",
    "ax.set_title('Accuracy (%)')\n",
    "ax.grid(axis='y', alpha=0.5)\n",
    "ax.bar(np.arange(1, Number_subject), test_score, color=\"#910A67\")\n",
    "ax.set(xticks=np.arange(1, Number_subject), xlabel='Subject', \n",
    "       yticks=np.arange(0, 101, step=10), ylabel='Accuracy',\n",
    "       title='Decision Tree Test Result')\n",
    "ax.set_axisbelow(True)\n",
    "plt.savefig('DecisionTreetest .jpg', bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Print each subject accuracy\n",
    "print(\"Test Accuracy for all subjects \")\n",
    "for i in range(9):\n",
    "    print(\"Subject{:02d} : {:.2f} %\".format(i+1, test_score[i]))    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "953ad771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T16:30:21.766102Z",
     "iopub.status.busy": "2024-06-19T16:30:21.765271Z",
     "iopub.status.idle": "2024-06-19T16:30:21.771831Z",
     "shell.execute_reply": "2024-06-19T16:30:21.770826Z"
    },
    "papermill": {
     "duration": 0.05403,
     "end_time": "2024-06-19T16:30:21.773839",
     "exception": false,
     "start_time": "2024-06-19T16:30:21.719809",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved to finalized_model.pkl\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "\n",
    "# Save the model to disk\n",
    "filename = 'finalized_model.pkl'\n",
    "with open(filename, 'wb') as file:\n",
    "    pickle.dump(model1, file)\n",
    "\n",
    "print(f\"Model saved to {filename}\")\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 4955127,
     "sourceId": 8342486,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 4994588,
     "sourceId": 8395659,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30699,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 86.897293,
   "end_time": "2024-06-19T16:30:22.442895",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-19T16:28:55.545602",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
